<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" dir="ltr" lang="en"><head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<meta http-equiv="Content-Style-Type" content="text/css">
		<meta name="generator" content="MediaWiki 1.14.0">
		<meta name="keywords" content="GSoC/2011/Ideas,GSoC,GSoC/2010/Ideas">
		<link rel="shortcut icon" href="http://community.kde.org/favicon.png">
		<link rel="search" type="application/opensearchdescription+xml" href="http://community.kde.org/opensearch_desc.php" title="KDE Community Wiki (en)">
		<link title="Creative Commons" type="application/rdf+xml" href="http://community.kde.org/index.php?title=GSoC/2011/Ideas&amp;action=creativecommons" rel="meta">
		<link rel="copyright" href="http://community.kde.org/KDE_Community_Wiki:Copyrights">
		<link rel="alternate" type="application/rss+xml" title="KDE Community Wiki RSS Feed" href="http://community.kde.org/index.php?title=Special:RecentChanges&amp;feed=rss">
		<link rel="alternate" type="application/atom+xml" title="KDE Community Wiki Atom Feed" href="http://community.kde.org/index.php?title=Special:RecentChanges&amp;feed=atom">
		<title>GSoC/2011/Ideas - KDE Community Wiki</title>
		<link rel="stylesheet" href="KDE_files/shared.css" type="text/css" media="screen">
		<link rel="stylesheet" href="KDE_files/commonPrint.css" type="text/css" media="print">
		<link rel="stylesheet" href="KDE_files/css.css" type="text/css" media="screen">
		<link rel="stylesheet" href="KDE_files/css_002.css" type="text/css" media="print">
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE50Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE55Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins/monobook/IE60Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins/monobook/IE70Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="KDE_files/index_002.css" type="text/css">
		<link rel="stylesheet" href="KDE_files/index_003.css" type="text/css" media="print">
		<link rel="stylesheet" href="KDE_files/index_004.css" type="text/css">
		<link rel="stylesheet" href="KDE_files/index.css" type="text/css">	
		<script type="text/javascript">/*<![CDATA[*/
		var skin = "oxygen";
		var stylepath = "/skins";
		var wgArticlePath = "/$1";
		var wgScriptPath = "";
		var wgScript = "/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://community.kde.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "GSoC/2011/Ideas";
		var wgTitle = "GSoC/2011/Ideas";
		var wgAction = "view";
		var wgArticleId = "2052";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = true;
		var wgCurRevisionId = "11560";
		var wgVersion = "1.14.0";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://community.kde.org/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}";
		var wgDBname = "communitywiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>
		<script type="text/javascript" src="KDE_files/wikibits.js"><!-- wikibits js --></script>
		<!-- Head Scripts -->
				<script type="text/javascript" src="KDE_files/ajax.js"></script>
		<script type="text/javascript" src="KDE_files/mwsuggest.js"></script>
		<style type="text/css">
		li#pt-openidlogin {
		  background: url(/extensions/OpenID/skin/icons/openid-inputicon.png) top left no-repeat;
		  padding-left: 20px;
		  text-transform: none;
		}
		</style>

		<script type="text/javascript" src="KDE_files/index.php"><!-- site js --></script>

	</head>
<body class="mediawiki ltr ns-0 ns-subject page-GSoC_2011_Ideas skin-oxygen">
	<!-- All the header navigation is placed here -->
	<div id="header">
			<div id="header_top"><div><div>
				<img alt="" src="KDE_files/top-kde.png">
				<!-- Name of Site Goes Here - Media Wiki doesn't provide name of site in API -->
				<!--<a href="/" class="headerlink">KDE Developers Home</a>-->
				<a href="http://community.kde.org/" class="title">KDE Community Wiki</a>
				</div></div></div>
	  	<div id="header_bottom">

		<div id="menu">
		<!-- Orderd List and Navigation Goes Here 
		  <ul>
			<li><a href="./sitemap.php">Sitemap</a></li>
			<li><a href="./contact.php">Contact Us</a></li>
		  </ul>
		 -->
		 <!-- Actions that for example allow you to edit page keep seperate! -->
			<ul>
								 <li id="ca-nstab-main" class="selected"><a href="http://community.kde.org/GSoC/2011/Ideas"><span>Page</span></a></li>
								 <li id="ca-talk" class="new"><a href="http://community.kde.org/index.php?title=Talk:GSoC/2011/Ideas&amp;action=edit&amp;redlink=1"><span>Discussion</span></a></li>
								 <li id="ca-viewsource"><a href="http://community.kde.org/index.php?title=GSoC/2011/Ideas&amp;action=edit"><span>View source</span></a></li>
								 <li id="ca-history"><a href="http://community.kde.org/index.php?title=GSoC/2011/Ideas&amp;action=history"><span>History</span></a></li>
						</ul>
		</div>
	  </div>
	</div>
		<div id="body_wrapper">
      		<div id="body">
				 <!-- Wiki Content Goes Here -->
        			<div id="right">
         				 <div class="content">
        					  <div id="main">
									<a name="top" id="top"></a>
																		<h1 class="firstHeading">GSoC/2011/Ideas</h1>
									<div id="bodyContent">
										<!-- <h3 id="siteSub">From KDE Community Wiki</h3> -->
										<div id="contentSub"><span class="subpages">&lt; <a href="http://community.kde.org/GSoC" title="GSoC">GSoC</a></span></div>  
																				<!--										<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>-->
										<!-- start content -->
										<p>See also: <a href="http://community.kde.org/GSoC" title="GSoC">GSoc Instructions</a>
</p>
<table id="toc" class="toc" summary="Contents"><tbody><tr><td><div id="toctitle"><h2>Contents</h2> <span class="toctoggle">[<a href="javascript:toggleToc()" class="internal" id="togglelink">hide</a>]</span></div>
<ul>
<li class="toclevel-1"><a href="#Guidelines"><span class="tocnumber">1</span> <span class="toctext">Guidelines</span></a>
<ul>
<li class="toclevel-2"><a href="#Information_for_Students"><span class="tocnumber">1.1</span> <span class="toctext">Information for Students</span></a></li>
<li class="toclevel-2"><a href="#Adding_a_Proposal"><span class="tocnumber">1.2</span> <span class="toctext">Adding a Proposal</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:"><span class="tocnumber">1.2.1</span> <span class="toctext">Project:</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1"><a href="#Ideas"><span class="tocnumber">2</span> <span class="toctext">Ideas</span></a>
<ul>
<li class="toclevel-2"><a href="#Generic"><span class="tocnumber">2.1</span> <span class="toctext">Generic</span></a>
<ul>
<li class="toclevel-3"><a href="#KDE_Demo"><span class="tocnumber">2.1.1</span> <span class="toctext">KDE Demo</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Amarok"><span class="tocnumber">2.2</span> <span class="toctext">Amarok</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Playlist_sharing"><span class="tocnumber">2.2.1</span> <span class="toctext">Project: Playlist sharing</span></a></li>
<li class="toclevel-3"><a href="#Project:_Self_Contained_Collection"><span class="tocnumber">2.2.2</span> <span class="toctext">Project: Self Contained Collection</span></a></li>
<li class="toclevel-3"><a href="#Project:_per-resource_disabling_of_collections"><span class="tocnumber">2.2.3</span> <span class="toctext">Project: per-resource disabling of collections</span></a></li>
<li class="toclevel-3"><a href="#Project:_Podcast_Synchronisation_via_gpodder.net"><span class="tocnumber">2.2.4</span> <span class="toctext">Project: Podcast Synchronisation via gpodder.net</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#digiKam"><span class="tocnumber">2.3</span> <span class="toctext">digiKam</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Camera_UI_Revamp"><span class="tocnumber">2.3.1</span> <span class="toctext">Project: Camera UI Revamp</span></a></li>
<li class="toclevel-3"><a href="#Project:_Presentation_View"><span class="tocnumber">2.3.2</span> <span class="toctext">Project: Presentation View</span></a></li>
<li class="toclevel-3"><a href="#Project:_MacOSX_support"><span class="tocnumber">2.3.3</span> <span class="toctext">Project: MacOSX support</span></a></li>
<li class="toclevel-3"><a href="#Project:_Video_metadata_support"><span class="tocnumber">2.3.4</span> <span class="toctext">Project: Video metadata support</span></a></li>
<li class="toclevel-3"><a href="#Project:_Clone_Tool_for_Image_Editor"><span class="tocnumber">2.3.5</span> <span class="toctext">Project: Clone Tool for Image Editor</span></a></li>
<li class="toclevel-3"><a href="#Project:_Panorama_Tool"><span class="tocnumber">2.3.6</span> <span class="toctext">Project: Panorama Tool</span></a></li>
<li class="toclevel-3"><a href="#Project:_Photo_Frame_Layouts"><span class="tocnumber">2.3.7</span> <span class="toctext">Project: Photo Frame Layouts</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#KDE_Edu"><span class="tocnumber">2.4</span> <span class="toctext">KDE Edu</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Marble:_Render_OpenStreetMap_.osm_files"><span class="tocnumber">2.4.1</span> <span class="toctext">Project: Marble: Render OpenStreetMap .osm files</span></a></li>
<li class="toclevel-3"><a href="#Project:_Marble_goes_Mobile.2C_Part_2"><span class="tocnumber">2.4.2</span> <span class="toctext">Project: Marble goes Mobile, Part 2</span></a></li>
<li class="toclevel-3"><a href="#Project:_Natural_Earth_Vector_Map"><span class="tocnumber">2.4.3</span> <span class="toctext">Project: Natural Earth Vector Map</span></a></li>
<li class="toclevel-3"><a href="#Project:_KStars:_Decouple_computational_code_from_the_UI_and_Database"><span class="tocnumber">2.4.4</span> <span class="toctext">Project: KStars: Decouple computational code from the UI and Database</span></a></li>
<li class="toclevel-3"><a href="#Project:_KStars:_Improve_the_observation_planner_and_logging_feature"><span class="tocnumber">2.4.5</span> <span class="toctext">Project: KStars: Improve the observation planner and logging feature</span></a></li>
<li class="toclevel-3"><a href="#Project:_KStars:_Printing_support"><span class="tocnumber">2.4.6</span> <span class="toctext">Project: KStars: Printing support</span></a></li>
<li class="toclevel-3"><a href="#Project:_KStars:_Make_KStars_more_usable_to_the_scientifically-inclined_user"><span class="tocnumber">2.4.7</span> <span class="toctext">Project: KStars: Make KStars more usable to the scientifically-inclined user</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#KDevelop"><span class="tocnumber">2.5</span> <span class="toctext">KDevelop</span></a>
<ul>
<li class="toclevel-3"><a href="#C.2B.2B0x_Support:"><span class="tocnumber">2.5.1</span> <span class="toctext">C++0x Support:</span></a></li>
<li class="toclevel-3"><a href="#Test_Framework:"><span class="tocnumber">2.5.2</span> <span class="toctext">Test Framework:</span></a></li>
<li class="toclevel-3"><a href="#KDevelop4_VCS_integration"><span class="tocnumber">2.5.3</span> <span class="toctext">KDevelop4 VCS integration</span></a></li>
<li class="toclevel-3"><a href="#Improved_PHP_Support:"><span class="tocnumber">2.5.4</span> <span class="toctext">Improved PHP Support:</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#KDE_Core"><span class="tocnumber">2.6</span> <span class="toctext">KDE Core</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Support_for_astronomical_calendar_systems"><span class="tocnumber">2.6.1</span> <span class="toctext">Project: Support for astronomical calendar systems</span></a></li>
<li class="toclevel-3"><a href="#Project:_Improvements_in_KIO_File_Transfer"><span class="tocnumber">2.6.2</span> <span class="toctext">Project: Improvements in KIO File Transfer</span></a></li>
<li class="toclevel-3"><a href="#Project:_Integrate_OpenPrinting_Common_Print_Dialog_into_KDE"><span class="tocnumber">2.6.3</span> <span class="toctext">Project: Integrate OpenPrinting Common Print Dialog into KDE</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#KDE_PIM"><span class="tocnumber">2.7</span> <span class="toctext">KDE PIM</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_OpenSocial_resource"><span class="tocnumber">2.7.1</span> <span class="toctext">Project: OpenSocial resource</span></a></li>
<li class="toclevel-3"><a href="#Project:_Improved_HTML_support_in_KMail"><span class="tocnumber">2.7.2</span> <span class="toctext">Project: Improved HTML support in KMail</span></a></li>
<li class="toclevel-3"><a href="#Project:_Improved_key_management_in_Kontact"><span class="tocnumber">2.7.3</span> <span class="toctext">Project: Improved key management in Kontact</span></a></li>
<li class="toclevel-3"><a href="#Project:_VOIP_Plugin_for_Kontact"><span class="tocnumber">2.7.4</span> <span class="toctext">Project: VOIP Plugin for Kontact</span></a></li>
<li class="toclevel-3"><a href="#Project:_KWallet_Improvments"><span class="tocnumber">2.7.5</span> <span class="toctext">Project: KWallet Improvments</span></a></li>
<li class="toclevel-3"><a href="#Project:_Communication_central_plugin_for_Kontact"><span class="tocnumber">2.7.6</span> <span class="toctext">Project: Communication central plugin for Kontact</span></a></li>
<li class="toclevel-3"><a href="#Project:_Metacontacts_support_in_Akonadi"><span class="tocnumber">2.7.7</span> <span class="toctext">Project: Metacontacts support in Akonadi</span></a></li>
<li class="toclevel-3"><a href="#Project:_Mobile_phone_syncing"><span class="tocnumber">2.7.8</span> <span class="toctext">Project: Mobile phone syncing</span></a></li>
<li class="toclevel-3"><a href="#Project:_OpenChange_resource"><span class="tocnumber">2.7.9</span> <span class="toctext">Project: OpenChange resource</span></a></li>
<li class="toclevel-3"><a href="#Project:_PST_resource"><span class="tocnumber">2.7.10</span> <span class="toctext">Project: PST resource</span></a></li>
<li class="toclevel-3"><a href="#Project:_Improved_support_for_Google_services"><span class="tocnumber">2.7.11</span> <span class="toctext">Project: Improved support for Google services</span></a></li>
<li class="toclevel-3"><a href="#Project:_User_Interface_improvements_in_KMail"><span class="tocnumber">2.7.12</span> <span class="toctext">Project: User Interface improvements in KMail</span></a></li>
<li class="toclevel-3"><a href="#Project:_Conversation_view_in_KMail"><span class="tocnumber">2.7.13</span> <span class="toctext">Project: Conversation view in KMail</span></a></li>
<li class="toclevel-3"><a href="#Project:_Improve_support_for_alternative_Calendar_Systems_in_Kontact"><span class="tocnumber">2.7.14</span> <span class="toctext">Project: Improve support for alternative Calendar Systems in Kontact</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Calligra_Karbon"><span class="tocnumber">2.8</span> <span class="toctext">Calligra Karbon</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Variable_thickness_lines"><span class="tocnumber">2.8.1</span> <span class="toctext">Project: Variable thickness lines</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Calligra_Kexi"><span class="tocnumber">2.9</span> <span class="toctext">Calligra Kexi</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Add_Maps_Support_to_Kexi"><span class="tocnumber">2.9.1</span> <span class="toctext">Project: Add Maps Support to Kexi</span></a></li>
<li class="toclevel-3"><a href="#Project:_Add_Web_pages_elements_to_Kexi"><span class="tocnumber">2.9.2</span> <span class="toctext">Project: Add Web pages elements to Kexi</span></a></li>
<li class="toclevel-3"><a href="#Project:_Add_multimedia_support_to_Kexi"><span class="tocnumber">2.9.3</span> <span class="toctext">Project: Add multimedia support to Kexi</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Calligra_Words"><span class="tocnumber">2.10</span> <span class="toctext">Calligra Words</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Improve_quality_of_ODF_write_support"><span class="tocnumber">2.10.1</span> <span class="toctext">Project: Improve quality of ODF write support</span></a></li>
<li class="toclevel-3"><a href="#Project:_Implement_notes-support"><span class="tocnumber">2.10.2</span> <span class="toctext">Project: Implement notes-support</span></a></li>
<li class="toclevel-3"><a href="#Project:_Fix_and_extend_LaTEX_support"><span class="tocnumber">2.10.3</span> <span class="toctext">Project: Fix and extend LaTEX support</span></a></li>
<li class="toclevel-3"><a href="#Project:_PDF-Import_and.2For_PDF-Export"><span class="tocnumber">2.10.4</span> <span class="toctext">Project: PDF-Import and/or PDF-Export</span></a></li>
<li class="toclevel-3"><a href="#Project:_Integrate_with_Akonadi"><span class="tocnumber">2.10.5</span> <span class="toctext">Project: Integrate with Akonadi</span></a></li>
<li class="toclevel-3"><a href="#Project:_References_tool"><span class="tocnumber">2.10.6</span> <span class="toctext">Project: References tool</span></a></li>
<li class="toclevel-3"><a href="#Project:_Layout_tool"><span class="tocnumber">2.10.7</span> <span class="toctext">Project: Layout tool</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Calligra_Krita"><span class="tocnumber">2.11</span> <span class="toctext">Calligra Krita</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_ABR_Brush_Support"><span class="tocnumber">2.11.1</span> <span class="toctext">Project: ABR Brush Support</span></a></li>
<li class="toclevel-3"><a href="#Project:_PSD_File_import.2Fexport_Support"><span class="tocnumber">2.11.2</span> <span class="toctext">Project: PSD File import/export Support</span></a></li>
<li class="toclevel-3"><a href="#Project:_Flow_and_drying:_real_media_support"><span class="tocnumber">2.11.3</span> <span class="toctext">Project: Flow and drying: real media support</span></a></li>
<li class="toclevel-3"><a href="#Project:_3D_Sketching_tool"><span class="tocnumber">2.11.4</span> <span class="toctext">Project: 3D Sketching tool</span></a></li>
<li class="toclevel-3"><a href="#Project:_Text_Balloon_support_for_Comics_work"><span class="tocnumber">2.11.5</span> <span class="toctext">Project: Text Balloon support for Comics work</span></a></li>
<li class="toclevel-3"><a href="#Project:_Painting_and_Separation_of_3D_Textures"><span class="tocnumber">2.11.6</span> <span class="toctext">Project: Painting and Separation of 3D Textures</span></a></li>
<li class="toclevel-3"><a href="#Project:_Advanced_selection_using_SIOX"><span class="tocnumber">2.11.7</span> <span class="toctext">Project: Advanced selection using SIOX</span></a></li>
<li class="toclevel-3"><a href="#Project:_Tagging_and_management_for_Krita_resources"><span class="tocnumber">2.11.8</span> <span class="toctext">Project: Tagging and management for Krita resources</span></a></li>
<li class="toclevel-3"><a href="#Project:_GPU-acceleration_for_Krita"><span class="tocnumber">2.11.9</span> <span class="toctext">Project: GPU-acceleration for Krita</span></a></li>
<li class="toclevel-3"><a href="#Project:_GPU-backend_for_OpenGTL"><span class="tocnumber">2.11.10</span> <span class="toctext">Project: GPU-backend for OpenGTL</span></a></li>
<li class="toclevel-3"><a href="#Project:_Substrate_simulation"><span class="tocnumber">2.11.11</span> <span class="toctext">Project: Substrate simulation</span></a></li>
<li class="toclevel-3"><a href="#Project:_Color_Mixing"><span class="tocnumber">2.11.12</span> <span class="toctext">Project: Color Mixing</span></a></li>
<li class="toclevel-3"><a href="#Project:_3D_Material_Image_Maps"><span class="tocnumber">2.11.13</span> <span class="toctext">Project: 3D Material Image Maps</span></a></li>
<li class="toclevel-3"><a href="#Project:_Shift_drag_sensors"><span class="tocnumber">2.11.14</span> <span class="toctext">Project: Shift drag sensors</span></a></li>
<li class="toclevel-3"><a href="#Project:_Tools_to_manipulate_Krita_files_.28.kra.29"><span class="tocnumber">2.11.15</span> <span class="toctext">Project: Tools to manipulate Krita files (.kra)</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Calligra_Stage"><span class="tocnumber">2.12</span> <span class="toctext">Calligra Stage</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Plasma-based_Presentation_View"><span class="tocnumber">2.12.1</span> <span class="toctext">Project: Plasma-based Presentation View</span></a></li>
<li class="toclevel-3"><a href="#Project:_Single-canvas_Presentation_Mode_.28like_Prezi_or_Zippl.29"><span class="tocnumber">2.12.2</span> <span class="toctext">Project: Single-canvas Presentation Mode (like Prezi or Zippl)</span></a></li>
<li class="toclevel-3"><a href="#Project:_Unified_Slide_Manager"><span class="tocnumber">2.12.3</span> <span class="toctext">Project: Unified Slide Manager</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Calligra_Plugins"><span class="tocnumber">2.13</span> <span class="toctext">Calligra Plugins</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Fontwork_Shape.2FTool"><span class="tocnumber">2.13.1</span> <span class="toctext">Project: Fontwork Shape/Tool</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#KWin"><span class="tocnumber">2.14</span> <span class="toctext">KWin</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Modularization_of_Workspace"><span class="tocnumber">2.14.1</span> <span class="toctext">Project: Modularization of Workspace</span></a></li>
<li class="toclevel-3"><a href="#Project:_Unit_Testing_Framework"><span class="tocnumber">2.14.2</span> <span class="toctext">Project: Unit Testing Framework</span></a></li>
<li class="toclevel-3"><a href="#Project:_Initial_Support_for_Wayland_Clients"><span class="tocnumber">2.14.3</span> <span class="toctext">Project: Initial Support for Wayland Clients</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Nepomuk"><span class="tocnumber">2.15</span> <span class="toctext">Nepomuk</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_A_.22real.22_query_parser_and_Query_Builder_Widget"><span class="tocnumber">2.15.1</span> <span class="toctext">Project: A "real" query parser and Query Builder Widget</span></a></li>
<li class="toclevel-3"><a href="#Project:_Project_Integration"><span class="tocnumber">2.15.2</span> <span class="toctext">Project: Project Integration</span></a></li>
<li class="toclevel-3"><a href="#Project:_Fancy_Bookmarking"><span class="tocnumber">2.15.3</span> <span class="toctext">Project: Fancy Bookmarking</span></a></li>
<li class="toclevel-3"><a href="#Project:_Real_Digikam_Integration"><span class="tocnumber">2.15.4</span> <span class="toctext">Project: Real Digikam Integration</span></a></li>
<li class="toclevel-3"><a href="#Project:_Metadata_Writeback"><span class="tocnumber">2.15.5</span> <span class="toctext">Project: Metadata Writeback</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Plasma"><span class="tocnumber">2.16</span> <span class="toctext">Plasma</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_QML_QtComponents_set"><span class="tocnumber">2.16.1</span> <span class="toctext">Project: QML QtComponents set</span></a></li>
<li class="toclevel-3"><a href="#Project:_Educational_desktop"><span class="tocnumber">2.16.2</span> <span class="toctext">Project: Educational desktop</span></a></li>
<li class="toclevel-3"><a href="#Project:_Plasma_media_center_first_release"><span class="tocnumber">2.16.3</span> <span class="toctext">Project: Plasma media center first release</span></a></li>
<li class="toclevel-3"><a href="#Project:_QML-ify_Plasma_widgets"><span class="tocnumber">2.16.4</span> <span class="toctext">Project: QML-ify Plasma widgets</span></a></li>
<li class="toclevel-3"><a href="#Project:_Move_Plasma_Functionality_in_Compositor"><span class="tocnumber">2.16.5</span> <span class="toctext">Project: Move Plasma Functionality in Compositor</span></a></li>
<li class="toclevel-3"><a href="#Project:_Helping_in_libplasma2_development"><span class="tocnumber">2.16.6</span> <span class="toctext">Project: Helping in libplasma2 development</span></a></li>
<li class="toclevel-3"><a href="#Project:_Plasma_mobile_components"><span class="tocnumber">2.16.7</span> <span class="toctext">Project: Plasma mobile components</span></a></li>
<li class="toclevel-3"><a href="#Project:_Integration_of_home_automation_system_in_desktop"><span class="tocnumber">2.16.8</span> <span class="toctext">Project: Integration of home automation system in desktop</span></a></li>
<li class="toclevel-3"><a href="#Project:_Spread_activities_to_applications"><span class="tocnumber">2.16.9</span> <span class="toctext">Project: Spread activities to applications</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Phonon"><span class="tocnumber">2.17</span> <span class="toctext">Phonon</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_QML.2FQGraphicsScene_Video_Painting"><span class="tocnumber">2.17.1</span> <span class="toctext">Project: QML/QGraphicsScene Video Painting</span></a></li>
<li class="toclevel-3"><a href="#Project:_Encoding"><span class="tocnumber">2.17.2</span> <span class="toctext">Project: Encoding</span></a></li>
<li class="toclevel-3"><a href="#Project:_Multi-Channel_Audio_KCM_Module"><span class="tocnumber">2.17.3</span> <span class="toctext">Project: Multi-Channel Audio KCM Module</span></a></li>
<li class="toclevel-3"><a href="#Project:_Cross-backend_Equalizer_support_with_PulseAudio"><span class="tocnumber">2.17.4</span> <span class="toctext">Project: Cross-backend Equalizer support with PulseAudio</span></a></li>
<li class="toclevel-3"><a href="#Project:_Testing_Framework"><span class="tocnumber">2.17.5</span> <span class="toctext">Project: Testing Framework</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Kate"><span class="tocnumber">2.18</span> <span class="toctext">Kate</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Code_Folding"><span class="tocnumber">2.18.1</span> <span class="toctext">Project: Code Folding</span></a></li>
<li class="toclevel-3"><a href="#Project:_Script_IDE"><span class="tocnumber">2.18.2</span> <span class="toctext">Project: Script IDE</span></a></li>
<li class="toclevel-3"><a href="#Project:_Modeline_Editor"><span class="tocnumber">2.18.3</span> <span class="toctext">Project: Modeline Editor</span></a></li>
<li class="toclevel-3"><a href="#Project:_Further_improve_the_Vi_Input_Mode"><span class="tocnumber">2.18.4</span> <span class="toctext">Project: Further improve the Vi Input Mode</span></a></li>
<li class="toclevel-3"><a href="#Project:_Elastic_Tabstop_support"><span class="tocnumber">2.18.5</span> <span class="toctext">Project: Elastic Tabstop support</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Rekonq"><span class="tocnumber">2.19</span> <span class="toctext">Rekonq</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:__Adblock_improvements_.26_elements_manipulation"><span class="tocnumber">2.19.1</span> <span class="toctext">Project:  Adblock improvements &amp; elements manipulation</span></a></li>
<li class="toclevel-3"><a href="#Project:_Plasma_KPart_for_Rekonq"><span class="tocnumber">2.19.2</span> <span class="toctext">Project: Plasma KPart for Rekonq</span></a></li>
<li class="toclevel-3"><a href="#Project:_Tab_Grouping_using_sessions_and_Panorama-like_view"><span class="tocnumber">2.19.3</span> <span class="toctext">Project: Tab Grouping using sessions and Panorama-like view</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#ownCloud"><span class="tocnumber">2.20</span> <span class="toctext">ownCloud</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Local_sync_client"><span class="tocnumber">2.20.1</span> <span class="toctext">Project: Local sync client</span></a></li>
<li class="toclevel-3"><a href="#Project:_PIM_web_interface"><span class="tocnumber">2.20.2</span> <span class="toctext">Project: PIM web interface</span></a></li>
<li class="toclevel-3"><a href="#Project:_Sharing"><span class="tocnumber">2.20.3</span> <span class="toctext">Project: Sharing</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#KDE_Usability"><span class="tocnumber">2.21</span> <span class="toctext">KDE Usability</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Usability_Survey_Framework"><span class="tocnumber">2.21.1</span> <span class="toctext">Project: Usability Survey Framework</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#KDE_SDK"><span class="tocnumber">2.22</span> <span class="toctext">KDE SDK</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Umbrello_UML_Modeller_QGraphicsView_Port"><span class="tocnumber">2.22.1</span> <span class="toctext">Project: Umbrello UML Modeller QGraphicsView Port</span></a></li>
<li class="toclevel-3"><a href="#Project:_Umbrello_UML_Modeller_Port_to_Calligra_Flake"><span class="tocnumber">2.22.2</span> <span class="toctext">Project: Umbrello UML Modeller Port to Calligra Flake</span></a></li>
<li class="toclevel-3"><a href="#Project:_A_Mercurial_plug-in_for_Dolphin"><span class="tocnumber">2.22.3</span> <span class="toctext">Project: A Mercurial plug-in for Dolphin</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Okular"><span class="tocnumber">2.23</span> <span class="toctext">Okular</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Advanced_text_layout_recognition_engine"><span class="tocnumber">2.23.1</span> <span class="toctext">Project: Advanced text layout recognition engine</span></a></li>
<li class="toclevel-3"><a href="#Project:_Annotation_writing_in_PDF_documents"><span class="tocnumber">2.23.2</span> <span class="toctext">Project: Annotation writing in PDF documents</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Knights"><span class="tocnumber">2.24</span> <span class="toctext">Knights</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Saving.2C_loading_and_analyzing_games"><span class="tocnumber">2.24.1</span> <span class="toctext">Project: Saving, loading and analyzing games</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Gluon"><span class="tocnumber">2.25</span> <span class="toctext">Gluon</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Code_completion_in_Gluon_Creator"><span class="tocnumber">2.25.1</span> <span class="toctext">Project: Code completion in Gluon Creator</span></a></li>
<li class="toclevel-3"><a href="#Project:_Version_control_integration_in_Gluon_Creator"><span class="tocnumber">2.25.2</span> <span class="toctext">Project: Version control integration in Gluon Creator</span></a></li>
<li class="toclevel-3"><a href="#Project:_Achievements.2Fstatistics_system"><span class="tocnumber">2.25.3</span> <span class="toctext">Project: Achievements/statistics system</span></a></li>
<li class="toclevel-3"><a href="#Project:_Dynamic_Shader_Generator"><span class="tocnumber">2.25.4</span> <span class="toctext">Project: Dynamic Shader Generator</span></a></li>
<li class="toclevel-3"><a href="#Project:_Integrating_SMARTS_Game_AI_system"><span class="tocnumber">2.25.5</span> <span class="toctext">Project: Integrating SMARTS Game AI system</span></a></li>
<li class="toclevel-3"><a href="#Project:_XInput2_Backend_for_Gluon_Input"><span class="tocnumber">2.25.6</span> <span class="toctext">Project: XInput2 Backend for Gluon Input</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Telepathy"><span class="tocnumber">2.26</span> <span class="toctext">Telepathy</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Distributed_Shared-State_system_based_on_DBus_tubes_for_KDE_apps"><span class="tocnumber">2.26.1</span> <span class="toctext">Project: Distributed Shared-State system based on DBus tubes for KDE apps</span></a></li>
<li class="toclevel-3"><a href="#Project:_Amarok_Playlist_Sharing"><span class="tocnumber">2.26.2</span> <span class="toctext">Project: Amarok Playlist Sharing</span></a></li>
<li class="toclevel-3"><a href="#Project:_Innovative_new_UI.2FInteraction_Methods"><span class="tocnumber">2.26.3</span> <span class="toctext">Project: Innovative new UI/Interaction Methods</span></a></li>
<li class="toclevel-3"><a href="#Project:_Multi-Player_gaming_in_KDE_games"><span class="tocnumber">2.26.4</span> <span class="toctext">Project: Multi-Player gaming in KDE games</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#simon"><span class="tocnumber">2.27</span> <span class="toctext">simon</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_simon_workspace_integration_.28Voice_control_the_KDE_desktop.29"><span class="tocnumber">2.27.1</span> <span class="toctext">Project: simon workspace integration (Voice control the KDE desktop)</span></a></li>
<li class="toclevel-3"><a href="#Project:_Context_dependent_speech_recognition"><span class="tocnumber">2.27.2</span> <span class="toctext">Project: Context dependent speech recognition</span></a></li>
<li class="toclevel-3"><a href="#Project:_Voxforge_integration"><span class="tocnumber">2.27.3</span> <span class="toctext">Project: Voxforge integration</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#KDE_WWW_.2F_KDE_Sysadmin"><span class="tocnumber">2.28</span> <span class="toctext">KDE WWW / KDE Sysadmin</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_Single_login_through_Identity.KDE.org_Integration"><span class="tocnumber">2.28.1</span> <span class="toctext">Project: Single login through Identity.KDE.org Integration</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#KDE_on_Windows"><span class="tocnumber">2.29</span> <span class="toctext">KDE on Windows</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_single_applications"><span class="tocnumber">2.29.1</span> <span class="toctext">Project: single applications</span></a></li>
<li class="toclevel-3"><a href="#Project:_new_KDE_on_Windows_installer"><span class="tocnumber">2.29.2</span> <span class="toctext">Project: new KDE on Windows installer</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#KDE_Accessibility"><span class="tocnumber">2.30</span> <span class="toctext">KDE Accessibility</span></a>
<ul>
<li class="toclevel-3"><a href="#Project:_You_decide"><span class="tocnumber">2.30.1</span> <span class="toctext">Project: You decide</span></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</td></tr></tbody></table><script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<a name="Guidelines" id="Guidelines"></a><h2> <span class="mw-headline"> Guidelines  </span></h2>
<a name="Information_for_Students" id="Information_for_Students"></a><h3> <span class="mw-headline"> Information for Students </span></h3>
<p>These ideas were contributed by our developers and users. They are 
sometimes vague or incomplete. If you wish to submit a proposal based on
 these ideas, you may wish to contact the developers and find out more 
about the particular suggestion you're looking at.
</p><p>Being accepted as a Google Summer of Code student is quite 
competitive. Accepted students typically have thoroughly researched the 
technologies of their proposed project and have been in frequent contact
 with potential mentors. Simply copying and pasting an idea here will 
not work. On the other hand, creating a completely new idea without 
first consulting potential mentors is unlikely to work out.
</p><p>When writing your proposal or asking for help from the general 
KDE community don't assume people are familiar with the ideas here. KDE 
is really big!
</p><p>If there is no specific contact given you can ask questions on the general KDE development list kde-devel@kde.org. See <a href="http://www.kde.org/mailinglists/" class="external text" title="http://www.kde.org/mailinglists/" rel="nofollow">the KDE mailing lists page</a> for information on available mailing lists and how to subscribe.
</p>
<a name="Adding_a_Proposal" id="Adding_a_Proposal"></a><h3> <span class="mw-headline"> Adding a Proposal </span></h3>
<div class="rbroundbox" style="width:400px; float:center"><div class="rbtopwrap"><div class="rbtop"><div></div></div>Note</div>
<div class="rbcontent"><div class="floatleft"><a href="http://community.kde.org/File:Action_pen.svg" class="image" title="noframe"><img alt="noframe" src="KDE_files/40px-Action_pen.png" border="0" height="40" width="40"></a></div>Follow the template of other proposals! <div class="clear"></div></div>
<div class="rbbot"><div></div></div>
</div>
<p><br>
</p>
<a name="Project:" id="Project:"></a><h4> <span class="mw-headline"> Project:  </span></h4>
<p><b>Brief explanation:</b>
</p><p><b>Expected results:</b>
</p><p><b>Knowledge Prerequisite:</b>
</p><p><b>Mentor:</b>
</p><p>When adding an idea to this section, please try to include the following data:
</p>
<dl><dd><ul><li>if the application is not widely known, a description of what it does and where its code lives
</li><li>a brief explanation
</li><li>the expected results
</li><li>pre-requisites for working on your project
</li><li>if applicable, links to more information or discussions
</li><li>mailing list or IRC channel for your application/library/module
</li><li>your name and email address for contact (if you're willing to be a mentor)
</li></ul>
</dd></dl>
<p>If you are not a developer but have a good idea for a proposal, get in contact with relevant developers first.
</p>
<a name="Ideas" id="Ideas"></a><h2> <span class="mw-headline"> Ideas  </span></h2>
<p><b>How to find ideas?</b> To see previous Project ideas, see: <a href="http://community.kde.org/GSoC/2010/Ideas" title="GSoC/2010/Ideas">2010 ideas</a>. Obvious sources of projects are the bugs database, the forum, and your list and IRC channel ideas.
</p>
<a name="Generic" id="Generic"></a><h3> <span class="mw-headline"> Generic </span></h3>
<a name="KDE_Demo" id="KDE_Demo"></a><h4> <span class="mw-headline"> KDE Demo </span></h4>
<p><b>Brief explanation:</b>
</p><p>KDE has developed a number of very interesting and powerful 
technologies, libraries and components but there is no easy way to show 
them to other people. 
</p><p>See <a href="http://www.elpauer.org/?p=668" class="external text" title="http://www.elpauer.org/?p=668" rel="nofollow">"A wish a day: KDE Demo"</a> for more details.
</p><p><b> Expected results:</b>
</p><p>Something like Qt Demo but with KDE technologies.
</p><p><b> Knowledge prerequisite:</b>
</p><p>C++ is the main language of KDE, therefore the demo should be in 
C++. The more you know about C++, Qt, KDE and scripting (for Kross and 
KDE bindings demos), the better. 
</p><p>This idea encompasses so much different stuff the student is not 
expected to know everything before he starts coding (but will certainly 
know a lot when he's done!).
</p><p>Skill level: medium
</p><p><b>Mentor:</b>
Pau Garcia i Quiles as general mentor and someone to ask for directions.
 Specific help for each technology will probably require help from its 
developers.
</p>
<a name="Amarok" id="Amarok"></a><h3> <span class="mw-headline"> Amarok  </span></h3>
<p>Amarok is a powerful KDE based music player for Linux and Unix, MacOS
 X and Windows with an intuitive interface. It makes playing the music 
you love and discovering new music easier than ever before - and it 
looks good doing it!
</p><p><br> <a href="http://amarok.kde.org/" class="external text" title="http://amarok.kde.org" rel="nofollow">Website</a> - <a href="https://mail.kde.org/mailman/listinfo/amarok" class="external text" title="https://mail.kde.org/mailman/listinfo/amarok" rel="nofollow">Mailing list</a> - IRC channel: #amarok on Freenode.
</p>
<a name="Project:_Playlist_sharing" id="Project:_Playlist_sharing"></a><h4> <span class="mw-headline"> Project: Playlist sharing </span></h4>
<p><b>Brief explanation:</b>
Amarok playlist sharing will allow you to select a set of tracks and 
share them with friends over chat. By using Telepathy lots of IM 
networks are available including jabber, google talk, AIM, MSN and 
facebook chat.
</p><p><b>Expected results:</b>
A plugin will add a PlaylistProvider to Amarok that enable the user to 
share via HTTP streaming (P2P) a playlist with online friends.<br>
A similar extention exists for Banshee: <a href="http://nloko.ca/?p=19" class="external free" title="http://nloko.ca/?p=19" rel="nofollow">http://nloko.ca/?p=19</a> Compatibiltiy with this would be big plus.
</p><p><b>Knowledge Prerequisite:</b>
Qt/KDE development (includes C++ &amp; git), Telepathy, HTTP streaming and NAT traversal.
</p><p>Any of these are optional but not all of them.
</p><p>Skill level: medium to high.
</p><p><b>Mentor:</b>
Bart Cerneels or Ian Monroe
</p>
<a name="Project:_Self_Contained_Collection" id="Project:_Self_Contained_Collection"></a><h4> <span class="mw-headline"> Project: Self Contained Collection </span></h4>
<p><b>Brief explanation:</b>
The self-contained collection is a rough concept where the folders
used as the location of tracks are not just plainly put into one
Collection, so they would appear as one entry ("Local Collection").
Instead each top level folder configured in the settings would have
it's own entry.
So let's say the configuration is this:
/home/user/music
/mnt/nas/music
</p><p>We would get 2 entries in the Local Music tab:
</p>
<ol><li> Local Collection from home folder
</li><li> NAS Collection
</li></ol>
<p>So when not at home so the laptop is not connected to the NAS
you won't see #2.
</p><p><b>Expected results:</b>
</p><p><b>Knowledge Prerequisite:</b>
Qt/KDE development (includes C++ &amp; git), SQL.
</p><p>Skill level: medium.
</p><p><b>Mentor:</b>
Someone from the Amarok team with in depth Collection knowledge. Contact Bart Cerneels (Stecchino on #amarok) for details.
</p>
<a name="Project:_per-resource_disabling_of_collections" id="Project:_per-resource_disabling_of_collections"></a><h4> <span class="mw-headline"> Project: per-resource disabling of collections </span></h4>
<p><b>Brief explanation:</b>
<a href="http://mail.kde.org/pipermail/amarok-devel/2011-March/008779.html" class="external free" title="http://mail.kde.org/pipermail/amarok-devel/2011-March/008779.html" rel="nofollow">http://mail.kde.org/pipermail/amarok-devel/2011-March/008779.html</a>
</p><p><b>Expected results:</b>
</p><p><b>Knowledge Prerequisite:</b>
Qt/KDE development (includes C++ &amp; git
</p><p>Skill level: medium.
</p><p><b>Mentor:</b>
Someone from the Amarok squad.
</p>
<a name="Project:_Podcast_Synchronisation_via_gpodder.net" id="Project:_Podcast_Synchronisation_via_gpodder.net"></a><h4> <span class="mw-headline"> Project: Podcast Synchronisation via gpodder.net </span></h4>
<p><b>Brief explanation:</b>
<a href="http://www.gpodder.net/" class="external text" title="http://www.gpodder.net" rel="nofollow">gpodder.net</a>
 is a Webservice that allows Users to synchronize their Podcast 
Subscriptions and Episode Status across different Devices. Amarok 
already contains a basic gpodder Service (used to display a Podcast 
Directory) and most API Calls of the Webservice can be accessed via <a href="http://wiki.gpodder.org/wiki/Libmygpo-qt" class="external text" title="http://wiki.gpodder.org/wiki/Libmygpo-qt" rel="nofollow">libmygpo-qt</a>. Your task would be to synchronise Podcasts &amp; Episode Status in Amarok.
</p><p><b>Expected results:</b>
</p>
<ul><li>User subscribes to a Podcast via the gpodder.net Webservice. 
Amarok sees this new Subscription and adds it to the available Podcast 
Subscriptions.
</li><li>User listens to an Episode of a Podcast in Amarok, stops 
Playback, leaves home and continues to listen to the Episode via the 
gpodder App on his N900
</li><li> ... and many more Use Cases you can think of&nbsp;;)
</li></ul>
<p><b>Knowledge Prerequisite:</b>
Qt/KDE development (includes C++ &amp; git)
</p><p>Skill level: medium.
</p><p><b>Mentor:</b>
Bart Cerneels (Project/gpodder.net/libmygpo-qt Information &amp; Support via #amarok from HorusHorrendus)
</p>
<a name="digiKam" id="digiKam"></a><h3> <span class="mw-headline"> digiKam  </span></h3>
<p>Photo Management program
</p><p><a href="http://www.digikam.org/" class="external text" title="http://www.digikam.org" rel="nofollow">digiKam project web site</a> - <a href="https://mail.kde.org/mailman/listinfo/digikam-devel" class="external text" title="https://mail.kde.org/mailman/listinfo/digikam-devel" rel="nofollow">Mailinglist</a> - IRC channel: #digikam on Freenode.
</p>
<a name="Project:_Camera_UI_Revamp" id="Project:_Camera_UI_Revamp"></a><h4> <span class="mw-headline"> Project: Camera UI Revamp </span></h4>
<p><b>Brief explanation:</b>
DigiKam features a UI for accessing and downloading pictures from 
cameras.
The code is rather old, using Qt3Support classes for the icon view, the 
UI code intermangled deeply with backend code, and has not seen very 
much care and love for some years.
</p><p>This project would involve taking the old code apart, rewriting a
 clean code base backend and frontend, but also adding user interface 
elements to make the most important everyday task as easy as possible.
</p><p>In more detail: Write a model listing images on a camera (There 
are two backends, USB mass storage cameras, which are basically files on
 disk, and gphoto2 cameras, which require access through a library). 
Take the existing digikam icon view and delegate classes, which are 
prepared for code reuse, and put together an icon view for the model. 
Cleanly separate the code that does the actual work (downloading, 
converting, renaming) from the UI. Wrap that in the main window.
</p><p>UI design: The current interface is powerful, exposing many 
options. We want to preserve that. But at the same time, there are three
 very common actions: a) Download all new files to the last used album 
b) Download all new files to a new album c) Download all new files to an
 existing album.<br>
It should be possible to carry out task (a) with one click, task (b) and
 (c) with two or three clicks, without opening a dialog. Friendly to the
 new user, preserving access to all options for the poweruser.
</p><p><b>Expected results:</b>
A camera UI based on Qt model/view and clean code which provides the 
currently available functionality, offering a quick path to download new
 pictures.
</p><p><b>Knowledge Prerequisite:</b> Qt, C++. Interest in Qt model/view and UI code.
</p><p><b>Mentor:</b> Gilles Caulier? (Marcel Wiesweg)
</p><p><br>
</p>
<a name="Project:_Presentation_View" id="Project:_Presentation_View"></a><h4> <span class="mw-headline"> Project: Presentation View </span></h4>
<p><b>Brief explanation:</b>
The presentation view is a full-screen workplace which you can use to 
present photos to yourself or your audience. At first glance it is 
looking like the current slide show, but then it is much more flexible: 
At any moment, you can access UI components like the map view, the 
metadata tab, the image properties tab, to access information, assign 
metadata, or show your audience the location of the picture on 
OpenStreetMap. You can access an icon view component to change the 
collection your are currently presenting, or a thumbbar component to 
switch to a different image.
</p><p>The main view typically shows one image full screen, but you can 
zoom; You can also change to a layout that shows four or five images at a
 time, like images put in a paper album.
You can change the order of images presented, and store order and layout
 (preferably in some XML format). You can load these presentations 
later, playing them automatically, coming back to the traditional slide 
show.
</p><p>Technically, it should be future proof as much as possible (Qt 
Quick. QGraphicsView. scene graph in the future? Will embed QWidgets 
though) The job is not to develop any of the components mentioned above,
 but to avoid that, and reuse the existing digikam components and 
models.
</p><p><b>Expected results:</b>
Something resembling the vision outlined above
</p><p><b>Knowledge Prerequisite:</b>
C++, Qt
</p><p><b>Mentor:</b>
Marcel Wiesweg
</p><p><br>
</p>
<a name="Project:_MacOSX_support" id="Project:_MacOSX_support"></a><h4> <span class="mw-headline"> Project: MacOSX support </span></h4>
<p><b>Brief explanation:</b>
</p><p>digiKam needs to be available under MacOSX in native. Currently, <a href="http://www.macports.org/" class="external text" title="http://www.macports.org" rel="nofollow">- Macports project</a>
 is the only way to get last digiKam under Mac.
Macports require to compile all depencies and digiKam as well. It's a 
long and hazardous solution to see digiKam running under Mac.
</p><p>Also, current digiKam implementation is not optimized for Mac 
desktop. A lots of point need to be improved to support better this 
operating system.
Graphical interface need to polished too.
</p><p>See relevant entries in KDE bugzilla about MacOSX support&nbsp;:
</p><p><a href="https://bugs.kde.org/show_bug.cgi?id=257679" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=257679" rel="nofollow">257679</a>
<a href="https://bugs.kde.org/show_bug.cgi?id=257773" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=257773" rel="nofollow">257773</a>
</p><p><b>Expected results:</b>
Provide scripts and configurations to build automatically a DMG archive of digiKam for MacOSX.
Improve digiKam GUI everywhere to be more elegant and more optimized for MacOSX.
</p><p><b>Knowledge Prerequisite:</b>
C++, Qt, MacOSX, scripting, DMG, packaging
</p><p><b>Mentor:</b>
Julien Narboux&nbsp;? (Gilles Caulier)
</p><p><br>
</p>
<a name="Project:_Video_metadata_support" id="Project:_Video_metadata_support"></a><h4> <span class="mw-headline"> Project: Video metadata support </span></h4>
<p><b>Brief explanation:</b>
</p><p>All recent digital-still camera device provide video capture. 
digiKam must be able to manage these files as images.
digiKam can already play video and register files to the database, but 
it lack important metadata used to catalog and sort item (as date, 
camera name, and all record condition).
</p><p>To improve video file support, video metadata management done in background need to be improved, to patch <a href="http://www.exiv2.org/" class="external text" title="http://www.exiv2.org" rel="nofollow">Exiv2 shared library</a> (already used by digiKam)
</p><p>See relevant entries in KDE bugzilla about video support&nbsp;:
</p><p><a href="https://bugs.kde.org/show_bug.cgi?id=164442" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=164442" rel="nofollow">164442</a>
<a href="https://bugs.kde.org/show_bug.cgi?id=229543" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=229543" rel="nofollow">229543</a>
</p><p><b>Expected results:</b>
Add video files support to Exiv2.
Patch digiKam metadata interface to handle video information.
</p><p><b>Knowledge Prerequisite:</b>
C++, Qt, video format, metadata
</p><p><b>Mentor:</b>
Gilles Caulier, Andreas Huggel
</p>
<a name="Project:_Clone_Tool_for_Image_Editor" id="Project:_Clone_Tool_for_Image_Editor"></a><h4> <span class="mw-headline"> Project: Clone Tool for Image Editor </span></h4>
<p><b>Brief explanation:</b>
</p><p>In digiKam image editor we need a simple clone tool to be able to remove quickly
dusts, spots, and other unwanted artefact from an image.
</p><p>See relevant entry in KDE bugzilla about it&nbsp;:
</p><p><a href="https://bugs.kde.org/show_bug.cgi?id=132483" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=132483" rel="nofollow">132483</a>
</p><p><b>Expected results:</b>
add a new tool (as new image editor plugin) with the clone feature.
</p><p><b>Knowledge Prerequisite:</b>
C++, Qt
</p><p><b>Mentor:</b>
Gilles Caulier
</p>
<a name="Project:_Panorama_Tool" id="Project:_Panorama_Tool"></a><h4> <span class="mw-headline"> Project: Panorama Tool </span></h4>
<p><b>Brief explanation:</b>
</p><p>With recent digital still camera, it's possible using a tripod to
 take images to create panoramic view.
We need a tool to assemble these images automatically. Common image 
corners must be detected and merged without to ask any settings to user.
Colors and luminosity of each shot must be adjusted automatically too.
</p><p>See relevant entry in KDE bugzilla about it&nbsp;:
</p><p><a href="https://bugs.kde.org/show_bug.cgi?id=235766" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=235766" rel="nofollow">235766</a>
</p><p><b>Expected results:</b>
add a new tool (as kipi plugin) with auto-panorama feature.
</p><p><b>Knowledge Prerequisite:</b>
C++, Qt
</p><p><b>Mentor:</b>
Gilles Caulier
</p>
<a name="Project:_Photo_Frame_Layouts" id="Project:_Photo_Frame_Layouts"></a><h4> <span class="mw-headline"> Project: Photo Frame Layouts </span></h4>
<p><b>Brief explanation:</b>
</p><p>To add the possibility to easily combine photos in different 
frames to make a collage/composition: a set of different layouts, or 
even better to make them editable for users. An example from the 
internet just to see what I mean:
</p><p><a href="http://www.snappysnaps-ipswich.co.uk/blog/collage_windowcollage_500px_sq.jpg" class="external text" title="http://www.snappysnaps-ipswich.co.uk/blog/collage_windowcollage_500px_sq.jpg" rel="nofollow">example of photo frame layout</a>
</p><p>Things that could be included: the background (color, gradient, a
 photo), the particular frame layout and maybe the possibility to add 
some text.
Once the template is finished, the only thing is to intuitively add 
photos to the frames (maybe with drag and drop?). Of course the photos 
don't have to completely fit in the frames, so they would be scaled to 
fit in one dimension and the final user would have to select the part of
 the other dimension to crop the photo in the frame, if necessary.
This could be a very nice feature also for Gwenview.
</p><p><b>Expected results:</b>
add a new tool for photo frame layout.
</p><p><b>Knowledge Prerequisite:</b>
C++, Qt
</p><p><b>Mentor:</b>
Somebody in the digiKam team or maybe also Gwenview team?
</p>
<a name="KDE_Edu" id="KDE_Edu"></a><h3> <span class="mw-headline"> KDE Edu  </span></h3>
<a name="Project:_Marble:_Render_OpenStreetMap_.osm_files" id="Project:_Marble:_Render_OpenStreetMap_.osm_files"></a><h4> <span class="mw-headline"> Project: Marble: Render OpenStreetMap .osm files  </span></h4>
<p><b>Brief explanation:</b> Marble has a framework in ongoing 
development which allows to display geographical data in a 
"GeoGraphicsView". The aim is to extend this framework so that small 
.osm files can be displayed using this framework. The work builds also 
on top of a prior GSoC project about OSM annotation which was able to 
create a wireframe display of .osm files. The following steps would 
probably be part of the project:
</p>
<ul><li> Investigate the osm-annotate plugin, make it work again and clean it up so that it meets today's coding standards
</li><li> Update the existing .osm parser code
</li><li> Integrate the .osm parser with the current file loading (ideally as a plugin)
</li><li> Extend the framework to handle proper styling of GeoGraphicsItems (so that outlined streets and colored areas are possible.
</li><li> On top of that add a color style to the current osm view that 
turns the wireframe display of .osm files into a colorful one (with 
mapnik-like colors for streets and areas)
</li><li> Handle text display in a basic way.
</li></ul>
<p><b>Expected results:</b> Colorful mapnik-style rendering of .osm files. An improved GeoGraphicsView framework that can handle styling.
</p><p><b>Knowledge Prerequisite:</b> A good grasp over C++ and 
object-oriented programming, and Qt; writing test cases with Qt; should 
quickly learn how to write libraries; have a lot of patience; ability to
 solve software design problems
</p><p><b>Mentor:</b> Torsten Rahn &lt;rahn@kde.org&gt;
</p><p><br>
</p>
<a name="Project:_Marble_goes_Mobile.2C_Part_2" id="Project:_Marble_goes_Mobile.2C_Part_2"></a><h4> <span class="mw-headline"> Project: Marble goes Mobile, Part 2</span></h4>
<p><b>Brief explanation:</b> The "Marble To Go" project during GSoC 2010
 has been a big success and these days there are packages of Marble 1.0 
available for Maemo5/N900 already. This project would continue the work 
with a focus done on Marble's Mobile version. The target platform is 
MeeGo (on the N900 and other devices). The aim is to improve the mobile 
experience of Marble. Possible subjects include:
</p>
<ul><li> QML/Qt Components integration
</li><li> User Interface improvements
</li><li> Qt Mobility integration
</li><li> Performance/Memory improvements
</li><li> Features for mobile use cases (e.g. Geocaching).
</li></ul>
<p><b>Expected results:</b> A better mobile experience of Marble (e.g. on the N900).
</p><p><b>Knowledge Prerequisite:</b> A good grasp over C++ and 
object-oriented programming, and Qt; writing test cases with Qt; should 
quickly learn how to write libraries; have a lot of patience; ability to
 solve software design problems
</p><p><b>Mentor:</b> Torsten Rahn &lt;rahn@kde.org&gt;
</p>
<a name="Project:_Natural_Earth_Vector_Map" id="Project:_Natural_Earth_Vector_Map"></a><h4> <span class="mw-headline"> Project: Natural Earth Vector Map</span></h4>
<p><b>Brief explanation:</b> The current "Atlas map" is based on the 
MWDB2 dataset. The data is pretty old and the whole implementation that 
covers the Atlas map still has a few traces of "historic" code. There's a
 new proposal that would introduce the high quality Natural Earth data. 
This would require several changes to the Marble code and its data. See
</p><p><a href="http://techbase.kde.org/Projects/Marble/NaturalEarth" class="external free" title="http://techbase.kde.org/Projects/Marble/NaturalEarth" rel="nofollow">http://techbase.kde.org/Projects/Marble/NaturalEarth</a>
</p><p><b>Expected results:</b> A full optimized rendering of the Natural Earth map as vector rendering by using and extending Marble's existing classes.
</p><p><b>Knowledge Prerequisite:</b> A good grasp over C++ and 
object-oriented programming, and Qt; writing test cases with Qt; should 
quickly learn how to write libraries; have a lot of patience; ability to
 solve software design problems
</p><p><b>Mentor:</b> Torsten Rahn &lt;rahn@kde.org&gt;
</p><p><br>
</p>
<a name="Project:_KStars:_Decouple_computational_code_from_the_UI_and_Database" id="Project:_KStars:_Decouple_computational_code_from_the_UI_and_Database"></a><h4> <span class="mw-headline"> Project: KStars: Decouple computational code from the UI and Database </span></h4>
<p><b>Brief explanation:</b> KStars has its computational code tightly bound to the rest of the application. The aim of this project is to:
</p><p>1. Investigate possible replacements for KStars' in-house 
computation, like libnova. It is important to keep KStars 
cross-platform. Hence we should look at cross-platform replacements.
</p><p>2. Decouple KStars' interface and database from its computational code
</p><p>3. Create a KStars computational engine library which contains all the computational code
</p><p>4. Write test cases to ensure that the computations are correct.
</p><p>5. Get KStars to use this library
</p><p>6. If time permits, write an interactive command-line client / python module / D-Bus interface to use this library.
</p><p>This is a difficult project, and requires a good deal of patience
 and endurance&nbsp;;-). Probably not everything on this is achievable 
within the time-span of a GSoC, but this is the ultimate goal of a 
project like this.
</p><p>Currently, a lot of the computational code is sprinkled across 
KSPlanetBase, SkyPoint and SkyObject. It would be easier if these were 
put into a library. I think parts 2 and 3 of the project could be split 
into stages like this:
</p><p>1. Move all computational code from SkyPoint and SkyObject into a
 bunch of classes. Get these object classes to use the new class for all
 computations. These computational classes should have access to a copy 
of KSNumbers, KStarsDateTime, GeoLocation and other paraphernalia.
</p><p>2. The Sun and moon are rather important for a lot of 
calculations. Create a separate class to answer computational questions 
about the sun. Replace the current use of KSSun / KSMoon to perform 
computations in a lot of places in the code by references code that uses
 this class.
</p><p>3. More changes [to be worked out later] 
</p><p><b>Expected results:</b> Clean, restructured code for KStars, which now uses a library that can be re-used in user-written scripts etc.
</p><p><b>Knowledge Prerequisite:</b> A good grasp over C++ and 
object-oriented programming, and Qt; writing test cases with Qt; should 
quickly learn how to write libraries; have a lot of patience; ability to
 solve software design problems
</p><p><b>Mentor:</b> Akarsh Simha &lt;akarsh.simha@kdemail.net&gt;, Victor Carbune &lt;victor.carbune@kdemail.net&gt;
</p>
<a name="Project:_KStars:_Improve_the_observation_planner_and_logging_feature" id="Project:_KStars:_Improve_the_observation_planner_and_logging_feature"></a><h4> <span class="mw-headline"> Project: KStars: Improve the observation planner and logging feature </span></h4>
<p><b>Brief explanation:</b> KStars already has an observation 
observation planner and logging feature. It requires a lot of tiny and 
not-so-tiny improvements though. Here's a list of some of the 
improvements we'd like to see. Not all might be implementable in a 
single GSoC, so pick and choose!&nbsp;:D
</p><p>1. "Smart" assignment of observation times to objects (accounting
 for time taken to observe each object) -- currently, the observation 
planner can make a timeline of objects to observe during an observing 
session (Fire up KStars, hit Ctrl + L). However, this is done by just 
stamping the time of meridian transit. That may not be reasonable in a 
real observing session, because it takes some time to view each object. A
 possibly smart way of assigning times would be to account for the time 
taken to view each object and then assign times by sorting the objects 
by RA first and then by abs(declination).
</p><p>2. A time-line view for your observation session plan, on which 
you can drag objects around to set observing times -- it would be great 
to have a time-line on which each object to observe is a slider. The 
time of observation of the object should be changeable in discrete units
 by moving the slider. The other objects' times should "re-adjust" to 
accommodate the change.
</p><p>3. Ensure compatibility with OAL 2.0 XML schema is perfect -- We 
use the OAL 2.0 XML schema, which is gaining on as a standard format for
 observation log and observing list exchange. However, OAL compliance is
 not 100% and needs to be polished and tested.
</p><p>4. Currently, OAL parsing code is tightly tied to the rest of KStars -- separate it out into a Qt-based OAL library
</p><p>5. Clean up the Observation Planner interface
</p><p>6. Clean up the Execute Session interface. Fix bugs.
</p><p>7. Bring the time-line view of a session into the Execute Session interface
</p><p>8. Add the ability to export OAL-compliant target lists (removing
 the 'scheduled time of observation' field, which is not compliant with 
OAL 2.0)
</p><p>9. Add the ability to read and edit OAL-compliant observation logs within KStars
</p><p>10. Add the ability to publish observation logs on a server.
</p><p><b>Expected results:</b> A better observation planning and logging feature for KStars.
</p><p><b>Knowledge Prerequisite:</b> C++ and Qt; XML parsing, in particular with Qt; be comfortable with desiging UIs using Qt
</p><p><b>Mentor:</b> Akarsh Simha &lt;akarsh.simha@kdemail.net&gt;, Victor Carbune &lt;victor.carbune@kdemail.net&gt;
</p>
<a name="Project:_KStars:_Printing_support" id="Project:_KStars:_Printing_support"></a><h4> <span class="mw-headline"> Project: KStars: Printing support </span></h4>
<p><b>Brief explanation:</b> KStars can currently print rendered images of the sky. But they are not well-annotated.
</p><p>The aim of this project is to write code that will print star 
charts from KStars with explanations and annotation, and also print 
observing lists.
</p><p>Here is our idea of the project. Feel free to come up with 
different feature ideas and different implementation ideas. Creativity 
is highly encouraged.
</p><p>The project essentially aims to:
</p><p>1. Create printed finder charts with Annotations, Multiple Fields-of-View, Legend etc.
</p><p>Here's an idea of what features we'd like to see in a chart:
<img src="KDE_files/kstars-mockup-printed-chart.png" alt="kstars-mockup-printed-chart.png">
</p><p>Here's an idea of what we mean by "multiple Fields-of-View":
<a href="http://deepsky.astronomie.info/And/g1/index.en.php" class="external free" title="http://deepsky.astronomie.info/And/g1/index.en.php" rel="nofollow">http://deepsky.astronomie.info/And/g1/index.en.php</a>
</p><p>The idea is to produce charts for three different "zoom" levels 
around the same point in the sky. Or even better, improvize and use the 
star hopper code (See tools/starhopper.h) to find out the coarse, 
binocular and fine fields of view.
</p><p>2. Create printed observation logger forms with slots for writing down details
and a representation of the FOV
</p><p>Like this one:
<a href="http://faintfuzzies.ca/v/hobbies/astro/KSTARS_OBSERVATION_FIELD_NOTES.PNG.html" class="external free" title="http://faintfuzzies.ca/v/hobbies/astro/KSTARS_OBSERVATION_FIELD_NOTES.PNG.html" rel="nofollow">http://faintfuzzies.ca/v/hobbies/astro/KSTARS_OBSERVATION_FIELD_NOTES.PNG.html</a>
</p><p>3. If time permits, use an OCR library to permit conversion of 
printed forms into OAL-compliant reports to the best extent possible.
</p><p>Creating a legend should not be very hard. Look at 
SkyMapDrawAbstract::exportSkyImage(). This draws a sky image on a 
QPaintDevice. One way to add details would be to use a QPixmap or 
whatever is appropriate as the QPaintDevice and then embed that in a 
larger QPaintDevice with the legend, title etc, and then add 
annotations.
</p><p>Creating multiple FOVs could be a challenge. Look at the relevant
 parts of the code (SkyMapDrawAbstract::exportSkyImage(), 
SkyMapComposite::draw() etc). We encourage clean solutions to this in 
the proposal.
</p><p>Also look at the Star hopper feature which can be accessed by 
right clicking on the SkyMap. Watch the console for debug output since 
this feature is still very experimental.
</p><p><b>Expected results:</b> Beautiful printed finder charts with 
multiple "zoom levels", printed observation log forms, and possibly 
digitized observation log reports using OAL XML schema
</p><p><b>Knowledge Prerequisite:</b> C++, ability to quickly learn Qt / KDE Printing libraries, QPainter API
</p><p><b>Mentor:</b> Victor Carbune &lt;victor.carbune@kdemail.net&gt;, Akarsh Simha &lt;akarsh.simha@kdemail.net&gt;
</p>
<a name="Project:_KStars:_Make_KStars_more_usable_to_the_scientifically-inclined_user" id="Project:_KStars:_Make_KStars_more_usable_to_the_scientifically-inclined_user"></a><h4> <span class="mw-headline"> Project: KStars: Make KStars more usable to the scientifically-inclined user </span></h4>
<p><b>Brief explanation:</b> KStars is currently good for education and 
for the hobby sky-observer. For those interested in more scientific 
aspects of astronomy, KStars does not have features to offer, but 
definitely does have the right existing framework to support these. The 
aim of this project is to write those lacking features, such as:
</p><p>1. Plate solving and mapping of images: Look up astrometry.net. 
They have a library that can identify and produce the celestial 
coordinates of all objects in any given photograph of the sky. Use 
KStars to provide an interface to astrometry.net, and display 
plate-solved images on the sky-map. Use texture mapping to do this in 
OpenGL mode.
</p><p>2. Retrieving scientific data: Make retrieval and visualization 
of data such as spectra of stars, variable star light curves etc. easy 
through KStars, via some simple GUI tools that initiate queries on 
various websites.
</p><p>3. Astronomy updates: Monitor websites for updates such as comet,
 asteroid and supernova discoveries and alert the user about such 
events. (Maybe) keep updated catalogs of currently observable comets, 
asteroids and supernovae.
</p><p><b>Expected results:</b> KStars is more usable for the scientifically inclined user.
</p><p><b>Knowledge Prerequisite:</b> C++, Qt, Ability to quickly learn KDE's HTTP API, UI design with Qt
</p><p><b>Mentor:</b> Akarsh Simha &lt;akarsh.simha@kdemail.net&gt;, Victor Carbune &lt;victor.carbune@kdemail.net&gt;
</p>
<a name="KDevelop" id="KDevelop"></a><h3> <span class="mw-headline"> KDevelop  </span></h3>
<p>KDE-based Integrated Development Environment, specializing in c++ 
support, but including a powerful generic framework (definition use 
chain) which makes it possible to relatively easily support multiple 
different languages.
</p><p><a href="http://www.kdevelop.org/" class="external text" title="http://www.kdevelop.org" rel="nofollow">Website</a> - <a href="http://www.kdevelop.org/index.html?filename=mailinglist.html" class="external text" title="http://www.kdevelop.org/index.html?filename=mailinglist.html" rel="nofollow">Mailing list</a> - IRC channel: #kdevelop on Freenode.
</p>
<a name="C.2B.2B0x_Support:" id="C.2B.2B0x_Support:"></a><h4> <span class="mw-headline"> C++0x Support:  </span></h4>
<p><b>Brief explanation:</b> Extend the C++ plugin to support C++0x features
</p><p><b>Expected results:</b> All new features that will definitely 
get into C++0x are supported in the parser. Correct DUChain integration 
is added and code completion works as expected.
</p><p><b>Knowledge Prerequisite:</b> C++, Qt, KDevplatform
</p><p><b>Mentor:</b> David Nolden
</p>
<a name="Test_Framework:" id="Test_Framework:"></a><h4> <span class="mw-headline"> Test Framework:  </span></h4>
<p><b>Brief explanation:</b> Revive the test framework and make it useable
</p><p><b>Expected results:</b> Integrated running of CTest suites with 
all the features one would expect from an IDE. Create a wizard to add 
new tests, with CMake integratoin and support for QTestLib for starters.
 Should be extensible in future.
</p><p><b>Knowledge Prerequisite:</b> C++, Qt, KDE, CMake, KDevplatform
</p><p><b>Mentor:</b> Aleix Pol
</p>
<a name="KDevelop4_VCS_integration" id="KDevelop4_VCS_integration"></a><h4> <span class="mw-headline"> KDevelop4 VCS integration </span></h4>
<p><b>Brief explanation:</b> Enhanced VCS integration
</p><p><b>Expected results:</b> It would be interesting a project 
regarding improving VCS integration in KDevelop by improving/providing 
new visualizations and UI so that the user has a better control on the 
system.
</p><p><b>Knowledge Prerequisite:</b> C++, VCS systems, Qt, KDE, KDevplatform
</p><p><b>Mentor:</b> Aleix Pol
</p>
<a name="Improved_PHP_Support:" id="Improved_PHP_Support:"></a><h4> <span class="mw-headline"> Improved PHP Support:  </span></h4>
<p><b>Brief explanation:</b> Polish XDebug and it's dependencies, improve PHP language support plugin.
</p><p><b>Expected results:</b> Make the XDebug plugin work and bring it
 and its dependenciees into a releasable state. Improve PHP language 
support plugin by fixing the Namespace support, adding basic code 
completion for array keys, and hopefully other things.
</p><p><b>Knowledge Prerequisite:</b> C++, Qt, KDE, PHP, XDebug, KDevplatform
</p><p><b>Mentor:</b> Milian Wolff
</p><p><br>
</p>
<a name="KDE_Core" id="KDE_Core"></a><h3> <span class="mw-headline"> KDE Core  </span></h3>
<p>KDE Core is the interest group working on the underlying KDE 
development platform such as kdelibs and kde-runtime.  KDE Core provides
 libraries that are used by all KDE applications and so essentially 
define what a KDE application is.  Working on KDE Core is highly 
challenging as it requires much forward thinking for maximum utility and
 flexibility as well as guaranteeing backwards compatibility and 
cross-platform support.
</p>
<a name="Project:_Support_for_astronomical_calendar_systems" id="Project:_Support_for_astronomical_calendar_systems"></a><h4> <span class="mw-headline"> Project: Support for astronomical calendar systems </span></h4>
<p><b>Brief explanation:</b>  Add support for astronomical calendar 
systems.  KDE is unique in the Linux eco-system for providing support 
for alternative calendar systems, such as the Hebrew, Islamic Civil, and
 Japanese calendar systems.  Support for such calendar systems is 
standard in the Windows and Mac worlds.  However, KDE does not as yet 
support calendar systems that require astronomical calculations, such as
 the Chinese and Islamic Lunar calendars, This project would fill this 
gap.
</p><p><b>Expected results:</b>  Documentation, design and production of
 Chinese, Indian, Islamic and Jalali/Persian calendar systems and their 
numerous derivatives.  The documentation to be of a high enough standard
 to submit to various standardization bodies.  Production of an 
astronomical library for calculating sunrise, sunset and moon phase (and
 any other useful calculations) for shared use between the calendar 
systems and other KDE libraries and applications such as KHolidays, 
KStars and Marble.
</p><p><b>Knowledge Prerequisite:</b> C++, especially an understanding 
of Binary Compatibility rules and good API design.  Some knowledge of 
Celestial Mechanics and good mathematical literacy.  Any experience with
 regular cultural use of astronomical calendars would be highly useful.
</p><p><b>Mentor:</b> John Layt, irc: jlayt, email: john at layt dot net
</p>
<a name="Project:_Improvements_in_KIO_File_Transfer" id="Project:_Improvements_in_KIO_File_Transfer"></a><h4> <span class="mw-headline"> Project: Improvements in KIO File Transfer </span></h4>
<p><b>Brief explanation:</b>  Transferring files in KIO currently has 
three significant limitations.  First, it scans every directory before 
transferring any files, which is slow for large numbers of files and 
directories.  This process also tends to hang for very large numbers of 
files.  Second, it stops on all errors, which means the user has to 
monitor the transfer.  It also provides no report on the errors at the 
end or any way to go back and check those files.  Finally, transfers 
happen in parallel, which can lead to excessive disk I/O activity or 
network traffic, slowing down all the transfers.  The purpose of this 
project would be to fix these problems.
</p><p><b>Expected results:</b>  Directory scanning and the actual file 
transfer should happen in parallel.  Errors should be handled in a more 
appropriate manner, with the response depending on the error in 
question.  The exact response to each error should be worked out with 
the mentor.  A report on all errors should be available at the end of a 
transfer.  Finally, there should be some method to merge multiple 
transfers, perhaps on a per-filesystem basis.
</p><p><b>Knowledge Prerequisite:</b> C++
</p><p><b>Mentor:</b> David Faure
</p>
<a name="Project:_Integrate_OpenPrinting_Common_Print_Dialog_into_KDE" id="Project:_Integrate_OpenPrinting_Common_Print_Dialog_into_KDE"></a><h4> <span class="mw-headline"> Project: Integrate OpenPrinting Common Print Dialog into KDE </span></h4>
<p><b>Brief explanation:</b>  The Common Print Dialog is an initiative 
by the OpenPrinting workgroup of the Linux Foundation to build a common 
fully featured print dialog for the Linux ecosystem.  KDE is currently 
working with OpenPrinting to complete the dialog in a manner suitable 
for use in KDE and Qt.  OpenPrinting is able to offer a number of GSoC 
slots for working on completing the dialog itself, integrating the 
dialog into key KDE applications, and integrating the KDE Color 
Management system into the dialog.
</p><p>Please see the <a href="https://www.linuxfoundation.org/collaborate/workgroups/gsoc/2011-gsoc-printing-projects" class="external text" title="https://www.linuxfoundation.org/collaborate/workgroups/gsoc/2011-gsoc-printing-projects" rel="nofollow">OpenPrinting GSoC</a> page for more details on these tasks.
</p><p><b>Mentor</b> OpenPrinting mentors, with KDE co-ordination by John Layt
</p>
<a name="KDE_PIM" id="KDE_PIM"></a><h3> <span class="mw-headline"> KDE PIM  </span></h3>
<p>KDE PIM is the interest group working on applications related to 
personal information management, e.g. contacts, calendar, mails, etc.
</p><p>There are interesting projects on all levels of the software 
stack: libraries, application porting, new applications, access to 
online resources, etc.
</p><p>Have a look at <a href="http://community.kde.org/GSoC/2010/Ideas#KDE_PIM" class="external text" title="http://community.kde.org/GSoC/2010/Ideas#KDE_PIM" rel="nofollow">last year's ideas</a> as well.
</p><p><a href="http://community.kde.org/KDE_PIM" class="external text" title="http://community.kde.org/KDE_PIM" rel="nofollow">Website</a> - <a href="http://techbase.kde.org/Projects/PIM" class="external text" title="http://techbase.kde.org/Projects/PIM" rel="nofollow">Project Wiki</a> - <a href="https://mail.kde.org/mailman/listinfo/kde-pim" class="external text" title="https://mail.kde.org/mailman/listinfo/kde-pim" rel="nofollow">Mailing list</a> - IRC channel: #kontact and #akonadi on Freenode.
</p>
<a name="Project:_OpenSocial_resource" id="Project:_OpenSocial_resource"></a><h4> <span class="mw-headline"> Project: OpenSocial resource </span></h4>
<p><b>Brief explanation:</b> Social networks are quite popular with many
 people, therefore KDEPIM should be able to extract data from the social
 networking sites. One example is the <a href="http://thomasmcguire.wordpress.com/2011/02/27/facebook-support-in-kdepim/" class="external text" title="http://thomasmcguire.wordpress.com/2011/02/27/facebook-support-in-kdepim/" rel="nofollow">facebook resource</a>, which makes friends and events available in KDEPIM. A vast amount of other social networks exist, many of them, like <a href="http://wiki.opensocial.org/index.php?title=LinkedIn" class="external text" title="http://wiki.opensocial.org/index.php?title=LinkedIn" rel="nofollow">LinkedIn</a>, <a href="http://blog.opensocial.org/2009/12/studivz-meinvz-and-schuelervz-launches.html" class="external text" title="http://blog.opensocial.org/2009/12/studivz-meinvz-and-schuelervz-launches.html" rel="nofollow">StudiVZ</a> and <a href="http://wiki.opensocial.org/index.php?title=MySpace" class="external text" title="http://wiki.opensocial.org/index.php?title=MySpace" rel="nofollow">MySpace</a>, use the <a href="http://www.opensocial.org/" class="external text" title="http://www.opensocial.org/" rel="nofollow">OpenSocial</a> API to provide access to their data. The goal of this project is to implement an Akonadi resource for OpenSocial networks.
</p><p><b>Expected results:</b> A working OpenSocial Akonadi resource that supports at least contacts and messages.
</p><p><b>Knowledge Prerequisite:</b> C++ and Qt should be known already
</p><p><b>Mentor:</b>
</p>
<a name="Project:_Improved_HTML_support_in_KMail" id="Project:_Improved_HTML_support_in_KMail"></a><h4> <span class="mw-headline"> Project: Improved HTML support in KMail </span></h4>
<p><b>Brief explanation:</b> HTML mails are used more and more frequently, it is therefore important that KMail has good HTML support. <a href="https://bugs.kde.org/show_bug.cgi?id=86423" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=86423" rel="nofollow">Sorely missing</a>
 at the moment is the ability to preserve HTML formatting while replying
 to a mail, which would be one of the main goals of the project. Apart 
from that, the existing HTML support should be polished.
</p><p><b>Expected results:</b> The ability to reply and forward HTML mails and keep the formatting.
</p><p><b>Knowledge Prerequisite:</b> C++ and Qt should be known already
</p><p><b>Mentor:</b> <a href="mailto:mcguire@kde.org" class="external text" title="mailto:mcguire@kde.org" rel="nofollow">Thomas McGuire</a>
</p>
<a name="Project:_Improved_key_management_in_Kontact" id="Project:_Improved_key_management_in_Kontact"></a><h4> <span class="mw-headline"> Project: Improved key management in Kontact </span></h4>
<p>See <a href="http://ungethym.blogspot.com/2011/02/gsoc-idea-2-improved-more-elegant.html" class="external free" title="http://ungethym.blogspot.com/2011/02/gsoc-idea-2-improved-more-elegant.html" rel="nofollow">http://ungethym.blogspot.com/2011/02/gsoc-idea-2-improved-more-elegant.html</a>.
</p>
<a name="Project:_VOIP_Plugin_for_Kontact" id="Project:_VOIP_Plugin_for_Kontact"></a><h4> <span class="mw-headline"> Project: VOIP Plugin for Kontact </span></h4>
<p><b>Brief explanation:</b> VOIP installations are used in many places, and need to be managed. One popular VOIP framework is <a href="http://www.asterisk.org/" class="external text" title="http://www.asterisk.org/" rel="nofollow">Asterisk</a>.
 The goal of this project is to provide a Kontact plugin or a standalone
 application that can manage as many aspects of Asterisk as possible.
</p><p><b>Expected results:</b> A VOIP plugin for Kontact
</p><p><b>Knowledge Prerequisite:</b> C++ and Qt should be known already
</p><p><b>Mentor:</b>
</p>
<a name="Project:_KWallet_Improvments" id="Project:_KWallet_Improvments"></a><h4> <span class="mw-headline"> Project: KWallet Improvments </span></h4>
<p><b>Brief explanation:</b> The wallet is used in many places in 
KDEPIM, for example when checking and sending email. Some users disable 
the wallet, which means in all places there is an implementation of an 
alternative password dialog. This should be merged with the KWallet API,
 so that it is possible to always use the same API. Additionally, this 
project should add a pinentry implementation that uses KWallet. Pinentry
 is the password dialog program that is used when doing crypto 
operations in KMail.
</p><p><b>Expected results:</b> A unified KWallet API and a pinentry implementation that uses KWallet
</p><p><b>Knowledge Prerequisite:</b> C++ and Qt should be known already
</p><p><b>Mentor:</b>
</p>
<a name="Project:_Communication_central_plugin_for_Kontact" id="Project:_Communication_central_plugin_for_Kontact"></a><h4> <span class="mw-headline"> Project: Communication central plugin for Kontact </span></h4>
<p><b>Brief explanation:</b> There is already a vast information for 
each contact available in KDE: The addressbook entries, chat logs, 
tweets, e-mails, Facebook messages and so on. The goal of this project 
is to create a person-centric view that shows all this information about
 a person, with a nice way to search and examine the data. It should 
also be possible to initiate communication with that person in this 
view.
</p><p><b>Expected results:</b> A Kontact plugin that shows all available information about a person and provides communication abilities.
</p><p><b>Knowledge Prerequisite:</b> C++ and Qt should be known already
</p><p><b>Mentor:</b>
</p>
<a name="Project:_Metacontacts_support_in_Akonadi" id="Project:_Metacontacts_support_in_Akonadi"></a><h4> <span class="mw-headline"> Project: Metacontacts support in Akonadi </span></h4>
<p><b>Brief explanation:</b> With Akonadi, contacts come from many 
different sources, for example from your personal contacts resource, 
from the
facebook resource or from the KDE accounts resource. Often, the same 
person is present in multiple resources, causing duplicates in 
KAddressbook.
The goal of this project is to automatically merge contacts from 
multiple sources into a metacontact that aggregates all information. A 
possible
implementation concept <a href="http://community.kde.org/KDE_PIM/Meetings/Osnabrueck_9#Contact_Merging" class="external text" title="http://community.kde.org/KDE_PIM/Meetings/Osnabrueck_9#Contact_Merging" rel="nofollow">has been covered during the last PIM meeting</a>.
</p><p><b>Expected results:</b> Working Metacontact support in Akonadi
</p><p><b>Knowledge Prerequisite:</b> C++ and Qt should be known already
</p><p><b>Mentor:</b>
</p>
<a name="Project:_Mobile_phone_syncing" id="Project:_Mobile_phone_syncing"></a><h4> <span class="mw-headline"> Project: Mobile phone syncing </span></h4>
<p><b>Brief explanation:</b> There are multiple way to sync a mobile phone with a computer, for example <a href="http://saidinesh5.wordpress.com/2010/08/24/are-we-there-yet/" class="external text" title="http://saidinesh5.wordpress.com/2010/08/24/are-we-there-yet/" rel="nofollow">SyncML</a>, <a href="http://www.opensync.org/wiki/plugins/akonadi" class="external text" title="http://www.opensync.org/wiki/plugins/akonadi" rel="nofollow">OpenSync</a>
 or ActiveSync. The first two already have a first implementation, but 
are still work in progress. Make one of the solutions fully work.
</p><p><b>Expected results:</b> A full solution for syncing mobile phones with Akonadi, which should include a GUI that is easy to use.
</p><p><b>Knowledge Prerequisite:</b> C++ and Qt should be known already.
</p><p><b>Mentor:</b> <a href="mailto:saidinesh5@gmail.com" class="external text" title="mailto:saidinesh5@gmail.com" rel="nofollow">Dinesh</a>
</p>
<a name="Project:_OpenChange_resource" id="Project:_OpenChange_resource"></a><h4> <span class="mw-headline"> Project: OpenChange resource </span></h4>
<p><b>Brief explanation:</b> Exchange is an important groupware server 
used in many businesses, support for the protocol would make KDEPIM much
 more attractive. Open source client libraries for Exchange are already 
available from the <a href="http://www.openchange.org/" class="external text" title="http://www.openchange.org/" rel="nofollow">OpenChange project</a>, and a <a href="http://www.kdedevelopers.org/node/3740" class="external text" title="http://www.kdedevelopers.org/node/3740" rel="nofollow">prototype OpenChange resource</a> for Akonadi is also available. The goal of this project is to complete the OpenChange resource.
</p><p><b>Expected results:</b> A working OpenChange Akonadi resource that supports mails, contacts, events, free/busy support and sending emails.
</p><p><b>Knowledge Prerequisite:</b> C++ and Qt should be known already
</p><p><b>Mentor:</b> <a href="mailto:bradh@frogmouth.net" class="external text" title="mailto:bradh@frogmouth.net" rel="nofollow">Brad Hards</a> (or others)
</p><p><br>
</p>
<a name="Project:_PST_resource" id="Project:_PST_resource"></a><h4> <span class="mw-headline"> Project: PST resource </span></h4>
<p><b>Brief explanation:</b> When migrating away from Microsoft Windows, mail
users often have large "archive" folders in PST (Personal Storage Table)
format. It would be useful if these could be accessed through Akonadi. There
are a couple of libraries available that could support this type of resource.
</p><p><b>Expected results:</b> A working PST Akonadi resource that supports mails, contacts, events, free/busy support and sending emails.
</p><p><b>Knowledge Prerequisite:</b> C++ and Qt should be known already
</p><p><b>Mentor:</b> <a href="mailto:bradh@frogmouth.net" class="external text" title="mailto:bradh@frogmouth.net" rel="nofollow">Brad Hards</a> (or others)
</p>
<a name="Project:_Improved_support_for_Google_services" id="Project:_Improved_support_for_Google_services"></a><h4> <span class="mw-headline"> Project: Improved support for Google services </span></h4>
<p><b>Brief explanation:</b> Google provides popular services for mails,
 contacts and calendars. Those are already supported in KDEPIM, mails 
are supported with the IMAP resource and there are also resources for 
contacts and calendars. Yet, these solutions are not fully polished yet,
 many problems for all three are reported. The goal of this project is 
to bring support to a prime level that works for users out of the box. 
Among others, it means supporting Google Mail labels as tags in 
Akonadi/Nepomuk.
</p><p><b>Expected results:</b> Flawless support for Google Mail IMAP and a google data resource that fully works without bugs.
</p><p><b>Knowledge Prerequisite:</b> C++ and Qt should be known already
</p><p><b>Mentor:</b>
</p>
<a name="Project:_User_Interface_improvements_in_KMail" id="Project:_User_Interface_improvements_in_KMail"></a><h4> <span class="mw-headline"> Project: User Interface improvements in KMail </span></h4>
<p><b>Brief explanation:</b> While KMail is powerful, the user interface
 can be improved in many places to make it easier to use and look more 
appealing. One of the goals is adding tab support for the preview pane. 
Apart from that, the student should suggest other UI improvements, for 
example by taking ideas form the bug tracker or from other mail clients.
 These UI improvements should not be adding new features, but making the
 existing UI better.
</p><p><b>Expected results:</b> A tabbed message preview pane and various other UI improvements.
</p><p><b>Knowledge Prerequisite:</b> C++ and Qt should be known already
</p><p><b>Mentor:</b> <a href="mailto:mcguire@kde.org" class="external text" title="mailto:mcguire@kde.org" rel="nofollow">Thomas McGuire</a>
</p>
<a name="Project:_Conversation_view_in_KMail" id="Project:_Conversation_view_in_KMail"></a><h4> <span class="mw-headline"> Project: Conversation view in KMail </span></h4>
<p><b>Brief explanation:</b> The preview pane in KMail should optionally
 be able
to show all messages of a thread at once, which is also known as 
"conversation view" and popular from the Google Mail web interface. The 
message list probably
needs a special mode that makes it more suitable for using conversation 
views.
</p><p><b>Expected results:</b> A smooth conversation view mode that not
 only adapts the
looks of the preview pane and the message list, but also delivers a good
 interaction workflow. There needs to be some thought on UI and 
interaction design behind this to create great usability.
</p><p><b>Knowledge Prerequisite:</b> C++ required, Qt recommended
</p><p><b>Mentor:</b> <a href="mailto:mcguire@kde.org" class="external text" title="mailto:mcguire@kde.org" rel="nofollow">Thomas McGuire</a>
</p>
<a name="Project:_Improve_support_for_alternative_Calendar_Systems_in_Kontact" id="Project:_Improve_support_for_alternative_Calendar_Systems_in_Kontact"></a><h4> <span class="mw-headline"> Project: Improve support for alternative Calendar Systems in Kontact </span></h4>
<p><b>Brief explanation:</b> KDE is unique in the Linux eco-system in 
providing support for alternative calendar systems such as Hebrew and 
Islamic calendars.  However, Kontact and all the open standards for PIM 
only support the Gregorian calendar system.  This project would explore 
ways of supporting alternative calendar systems in Kontact and in the 
wider open PIM standards world.
</p><p><b>Expected results:</b> To research, design and implement support for the following:
</p>
<ul><li> recurring calendar events using alternative calendar systems
</li><li> birthdays and anniversaries using alternative calendar systems
</li><li> display of an alternative calendar system in the calendar views
</li></ul>
<p><b>Knowledge Prerequisite:</b> Some C++ and Qt recommended. Some 
knowledge of the cultural use of alternative calendar systems.  Strong 
research and design skills, getting the iCalendar and vCard storage and 
interoperability definitions correct is the most important part of the 
project.
</p><p><b>Mentor:</b> John Layt
</p>
<a name="Calligra_Karbon" id="Calligra_Karbon"></a><h3> <span class="mw-headline"> Calligra Karbon </span></h3>
<p>Karbon is a vector drawing application with an user interface that is easy to use, highly customizable and extensible.
</p><p><a href="http://www.calligra-suite.org/karbon/" class="external text" title="http://www.calligra-suite.org/karbon/" rel="nofollow">Web</a> -  <a href="https://mail.kde.org/mailman/listinfo/calligra-devel" class="external text" title="https://mail.kde.org/mailman/listinfo/calligra-devel" rel="nofollow">Mailinglist</a> - IRC channel: #calligra on Freenode.
</p>
<a name="Project:_Variable_thickness_lines" id="Project:_Variable_thickness_lines"></a><h4> <span class="mw-headline"> Project: Variable thickness lines </span></h4>
<p><b>Brief explanation:</b>
One of the most fundamental basics of drawing is varying the width of 
your lines to show shape, form and perspective. Almost every line tapers
 at either end, and often gets thicker and thinner in different places 
as needed. For purely technical and histrorical reasons though, every 
vector program (Illustrator, Inkscape, Karbon etc) make curves all one 
hard width.
</p><p>This proposal is to modify the path a tool that, much like the 
path tool, would allow drawing curves, but where each node could have 
its width set so that the line width changed smoothly from node to node.
</p><p>As Karbon is part of the Calligra suite, this would clearly benefit apps such as Krita, also.
</p><p><b>Expected results:</b>
Modify path tool is able to scale the width of any path node to an arbitary  percentage (say 155%) of the stroke width. See <a href="http://bugsfiles.kde.org/attachment.cgi?id=56995" class="external free" title="http://bugsfiles.kde.org/attachment.cgi?id=56995" rel="nofollow">http://bugsfiles.kde.org/attachment.cgi?id=56995</a> for mockup.
</p><p><b>Technologies Used:</b>
C++,Qt,SVG?
</p><p><b>Mentor:</b>
Jan H? jaham @t gmx,net (need to ask&nbsp;:P )
</p>
<a name="Calligra_Kexi" id="Calligra_Kexi"></a><h3> <span class="mw-headline"> Calligra Kexi  </span></h3>
<p>Kexi is an open source data management application, long-awaited competitor for programs like MS Access or Filemaker.
</p><p>Mailing-list: <a href="https://mail.kde.org/mailman/listinfo/kexi/" class="external free" title="https://mail.kde.org/mailman/listinfo/kexi/" rel="nofollow">https://mail.kde.org/mailman/listinfo/kexi/</a>
</p><p>Project Page: <a href="http://kexi-project.org/" class="external free" title="http://kexi-project.org/" rel="nofollow">http://kexi-project.org/</a>
</p><p>Irc channel: #kexi on irc.freenode.net
</p><p>Forums: <a href="http://forum.kde.org/viewforum.php?f=203" class="external free" title="http://forum.kde.org/viewforum.php?f=203" rel="nofollow">http://forum.kde.org/viewforum.php?f=203</a>
</p><p>Development Wiki: <a href="http://community.kde.org/Kexi" class="external free" title="http://community.kde.org/Kexi" rel="nofollow">http://community.kde.org/Kexi</a>
</p>
<a name="Project:_Add_Maps_Support_to_Kexi" id="Project:_Add_Maps_Support_to_Kexi"></a><h4> <span class="mw-headline"> Project: Add Maps Support to Kexi </span></h4>
<p><b>Brief explanation:</b> Implement maps support for Kexi Forms, for Kexi Reports and for Calligra documents
</p>
<ul><li>Propose, design and implement maps support for Kexi Forms (map widget) as explained at <a href="http://community.kde.org/Kexi/Junior_Jobs/Map_Browser_Form_Widget" class="external autonumber" title="http://community.kde.org/Kexi/Junior_Jobs/Map_Browser_Form_Widget" rel="nofollow">[1]</a>
</li><li>Reusing the work for Kexi Forms, propose, design and implement maps support for Kexi Reports
</li><li>Based on the work for Kexi Forms and Reports, propose, design and implement maps support for Calligra documents, by providing <a href="http://community.kde.org/Calligra/Libs/Flake" class="external text" title="http://community.kde.org/Calligra/Libs/Flake" rel="nofollow">Flake shape</a> plugin
</li><li>All plugins have to reuse <a href="http://techbase.kde.org/Projects/Marble/MarbleDesigner" class="external text" title="http://techbase.kde.org/Projects/Marble/MarbleDesigner" rel="nofollow">Marble libraries</a>
</li><li>Maps for forms and reports should not use Flake technology
</li><li>Proposals supporting vector graphics for printouts (Reports and for Flake) can be a plus, since it means higher quality
</li><li>Proposals for using different resources for maps (i.e. in 
addition to what Marble provides) can be a plus; e.g. online services 
can be used (if legal) or third party offline map resources can be 
reused
</li></ul>
<p><b>Used Technologies:</b> C++, Qt, Marble libraries, plus possible web services to accessing maps
</p><p><b>Mentor:</b>
Jarosław Staniek, please contact calligra-devel@kde.org
</p>
<a name="Project:_Add_Web_pages_elements_to_Kexi" id="Project:_Add_Web_pages_elements_to_Kexi"></a><h4> <span class="mw-headline"> Project: Add Web pages elements to Kexi </span></h4>
<p><b>Brief explanation:</b> Implement web pages element for Kexi Forms, for Kexi Reports and for Calligra documents
</p>
<ul><li>Propose, design and implement web page support for Kexi Forms (web view widget) as explained at <a href="http://community.kde.org/Kexi/Junior_Jobs/Web_Browser_Form_Widget" class="external autonumber" title="http://community.kde.org/Kexi/Junior_Jobs/Web_Browser_Form_Widget" rel="nofollow">[2]</a>
</li><li>Reusing the work for Kexi Forms, propose, design and implement 
web pages support for Kexi Reports (e.g. printing snapshots of web 
pages)
</li><li>Based on the work for Kexi Forms and Reports, propose, design 
and implement web pages support for Calligra documents, by providing <a href="http://community.kde.org/Calligra/Libs/Flake" class="external text" title="http://community.kde.org/Calligra/Libs/Flake" rel="nofollow">Flake shape</a> plugin, so web page snapshots can be rendered dynamically within documents
</li><li>All plugins can reuse <a href="http://doc.qt.nokia.com/4.7-snapshot/qwebview.html" class="external text" title="http://doc.qt.nokia.com/4.7-snapshot/qwebview.html" rel="nofollow">QWebView</a> or <a href="http://doc.qt.nokia.com/4.7-snapshot/qgraphicswebview.html" class="external text" title="http://doc.qt.nokia.com/4.7-snapshot/qgraphicswebview.html" rel="nofollow">QGraphicsWebView</a> technologies or equivalent
</li><li>Implementations for forms and reports should not use Flake technology
</li></ul>
<p><b>Used Technologies:</b> C++, Qt, Web View (Qt or Qt GraphicsView)
</p><p><b>Mentor:</b>
Jarosław Staniek, please contact calligra-devel@kde.org
</p>
<a name="Project:_Add_multimedia_support_to_Kexi" id="Project:_Add_multimedia_support_to_Kexi"></a><h4> <span class="mw-headline"> Project: Add multimedia support to Kexi </span></h4>
<p><b>Brief explanation:</b> Implement multimedia support for Kexi Forms and Kexi Tables
</p>
<ul><li>Propose, design and implement multimedia (sound, video) support 
for Kexi Forms (as an interactive media view widget for video and a 
slider widget like <a href="http://www.christinemcivor.com/images/audio-widget.jpg" class="external autonumber" title="http://www.christinemcivor.com/images/audio-widget.jpg" rel="nofollow">[3]</a> for audio); phonon or Qt Multimedia can be utilized (propose your extensions and ideas in this area)
</li><li>presenting the media should be possible in-place, within forms or table views
</li><li>Reusing the work for Kexi Forms, propose, design and implement 
support for tables; this part would share most of the code with Forms, 
since only the presentation is different (i.e. tabular view); for 
example see the <a href="http://kexi-project.org/pics/2.2/rc1/kexi-2.2-rc1-tableview-optimized-images.png" class="external text" title="http://kexi-project.org/pics/2.2/rc1/kexi-2.2-rc1-tableview-optimized-images.png" rel="nofollow">screen shot presenting image embedded within a tabular view</a> (propose your extensions and ideas in this area)
</li><li>Regarding storage, consider two approaches (both, not one of them):
<ol><li>storing the video/audio data internally in the database as Big 
Objects (BLOB) exposed in Kexi tables as Object data type; this option 
is suitable for small data
</li><li>storing the video/audio data externally in local or remote 
filesystems and keep only the references as URLs in the database; this 
option is suitable for large data
</li></ol>
<ul><li>Propose your ideas and extensions regarding the storage, e.g. caching locally previews of the video/audio
</li></ul>
</li><li>propose integration features with the underlying operating 
system (not just with KDE desktop but also with other desktops, be it 
GNOME or Windows); example of this is action for opening the video/audio
 in given external player and/or in default player
</li><li>For information about the way of delivering form widge, see <a href="http://community.kde.org/Kexi/Junior_Jobs/Web_Browser_Form_Widget" class="external text" title="http://community.kde.org/Kexi/Junior_Jobs/Web_Browser_Form_Widget" rel="nofollow">description for similar task</a>
</li></ul>
<p><b>Used Technologies:</b> C++, Qt, Phonon or Qt Multimedia or equivalent
</p><p><b>Mentor:</b>
Jarosław Staniek, please contact calligra-devel@kde.org
</p>
<a name="Calligra_Words" id="Calligra_Words"></a><h3> <span class="mw-headline"> Calligra Words </span></h3>
<p><a href="http://www.calligra-suite.org/words/" class="external text" title="http://www.calligra-suite.org/words/" rel="nofollow">Web</a> -  <a href="https://mail.kde.org/mailman/listinfo/calligra-devel" class="external text" title="https://mail.kde.org/mailman/listinfo/calligra-devel" rel="nofollow">Mailinglist</a> - IRC channel: #calligra on Freenode.
</p>
<a name="Project:_Improve_quality_of_ODF_write_support" id="Project:_Improve_quality_of_ODF_write_support"></a><h4> <span class="mw-headline"> Project: Improve quality of ODF write support </span></h4>
<p><b>Brief explanation:</b> While a lot of work went into improving the
 quality of loading ODF text-documents, saving them can still be 
improved a lot. The goal of the gsoc would be to improve the quality of 
the by Calligra Words produced ODF. This means fixing the produced ODF 
text-documents so they a) do validate against the ODF XML-schema and b) 
are proper loaded with Calligra Words, LibreOffice.org/OpenOffice.org, 
Microsoft Word, etc. By identifying and fixing bugs and adding unittests
 for regression-testing we could improve the quality of the core of 
Calligra significantly.
</p><p><b>Used Technologies:</b> C++, Qt
</p><p><b>Mentor:</b>
Sebastian Sauer, please contact calligra-devel@kde.org
</p>
<a name="Project:_Implement_notes-support" id="Project:_Implement_notes-support"></a><h4> <span class="mw-headline"> Project: Implement notes-support </span></h4>
<p><b>Brief explanation:</b> Implement and extend the notes-support in 
Calligra Words to view+add+edit+delete+load+save 
notes/comments/annotations in Calligra Words.
</p>
<ul><li> integrate into textshape so not only Calligra Words can profit (reuse the notes functionality).
</li><li> display notes in Calligra Words on the left/right side of the page-textshape.
</li><li> inline-editing (using a textshape).
</li><li> anchor to character/word(/paragraph/image/...)
</li><li> see ODF 1.2 specs "6.3.2 &lt;text:note&gt;" and "6.3.3 
&lt;text:note-citation&gt;" and "6.3.4 &lt;text:note-body&gt;" and 
"7.7.7 &lt;text:note-ref&gt;" and "16.29.3 
&lt;text:notes-configuration&gt;"
</li><li> comment-text, author, date/time
</li><li> see also the bugs <a href="https://bugs.kde.org/show_bug.cgi?id=260138" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=260138" rel="nofollow">260138</a> and <a href="https://bugs.kde.org/show_bug.cgi?id=260184" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=260184" rel="nofollow">260184</a> and <a href="https://bugs.kde.org/show_bug.cgi?id=260102" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=260102" rel="nofollow">260102</a> and <a href="https://bugs.kde.org/show_bug.cgi?id=260127" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=260127" rel="nofollow">260127</a> and <a href="http://mail.kde.org/pipermail/calligra-devel/2011-February/000959.html" class="external text" title="http://mail.kde.org/pipermail/calligra-devel/2011-February/000959.html" rel="nofollow">"Post-it" area + notes as a GSOC?</a>.
</li></ul>
<p><b>Used Technologies:</b> C++, Qt
</p><p><b>Mentor:</b>
Sebastian Sauer, please contact calligra-devel@kde.org
</p>
<a name="Project:_Fix_and_extend_LaTEX_support" id="Project:_Fix_and_extend_LaTEX_support"></a><h4> <span class="mw-headline"> Project: Fix and extend LaTEX support </span></h4>
<p><b>Brief explanation:</b> Calligra Words has an import and export 
filter for LaTEX documents. Those need to be extended to proper 
import/export and produce better results. We could also implement a new 
view in Calligra Words to support latex like working.
</p><p>See also bugs <a href="https://bugs.kde.org/show_bug.cgi?id=260063" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=260063" rel="nofollow">260063</a> and <a href="https://bugs.kde.org/show_bug.cgi?id=260056" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=260056" rel="nofollow">260056</a>.
</p><p><b>Used Technologies:</b> C++, Qt
</p><p><b>Mentor:</b>
Sebastian Sauer, please contact calligra-devel@kde.org
</p>
<a name="Project:_PDF-Import_and.2For_PDF-Export" id="Project:_PDF-Import_and.2For_PDF-Export"></a><h4> <span class="mw-headline"> Project: PDF-Import and/or PDF-Export </span></h4>
<p><b>Brief explanation:</b> Currently Calligra Words supports exporting
 the drawn canvas as images using the File=&gt;ExportPDF menu-item. The 
idea is to create an export and/or import filter to import and/or export
 to/from PDF (not as images but as text) using poppler.
</p><p><b>Used Technologies:</b> C++, Qt
</p><p><b>Mentor:</b>
Sebastian Sauer, please contact calligra-devel@kde.org
</p>
<a name="Project:_Integrate_with_Akonadi" id="Project:_Integrate_with_Akonadi"></a><h4> <span class="mw-headline"> Project: Integrate with Akonadi </span></h4>
<p><b>Brief explanation:</b> Integrate with Akonadi to provide access to resources (contacts-variables, mail-merge, ...).
</p><p>See also bug <a href="https://bugs.kde.org/show_bug.cgi?id=260220" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=260220" rel="nofollow">260220</a>.
</p><p><b>Used Technologies:</b> C++, Qt
</p><p><b>Mentor:</b>
Sebastian Sauer, please contact calligra-devel@kde.org
</p>
<a name="Project:_References_tool" id="Project:_References_tool"></a><h4> <span class="mw-headline"> Project: References tool  </span></h4>
<p><b>Brief explanation:</b> Words is tools based and has a write tool, a
 review tool as well as the beginings of a layout tool. What we don't 
have yet is a references tool that provide the ui for creating table of 
contents, citations/bibliography, and end notes. Table of centents has 
all the underlying engine in place. That same engine can be 
reused/copied/modified for bibliography (maybe planning for the use of <a href="http://www.zotero.org/" class="external free" title="http://www.zotero.org" rel="nofollow">http://www.zotero.org</a> )
</p><p><b>Used Technologies:</b> C++, Qt
</p><p><b>Mentor:</b>
Casper Boemann, please contact calligra-devel@kde.org
</p>
<a name="Project:_Layout_tool" id="Project:_Layout_tool"></a><h4> <span class="mw-headline"> Project: Layout tool  </span></h4>
<p><b>Brief explanation:</b> Words is tools based and has a write tool, a
 review tool as well as the beginings of a layout tool. What we need is 
completion of this layout tool. Much of it is just ui allowing the user 
to set all sorts of layout options using the engine which is already in 
place.
</p><p>As it's not such a big project, we expect everything about this 
tool to be perfect so it can enter directly into the next version of 
Calligra Words.
</p><p><b>Used Technologies:</b> C++, Qt
</p><p><b>Mentor:</b>
Casper Boemann, please contact calligra-devel@kde.org
</p>
<a name="Calligra_Krita" id="Calligra_Krita"></a><h3> <span class="mw-headline"> Calligra Krita  </span></h3>
<p>Krita is a KDE program for sketching and painting, offering an 
end–to–end solution for creating digital painting files from scratch by 
masters.
</p><p>Mailing-list: <a href="https://mail.kde.org/mailman/listinfo/kimageshop/" class="external free" title="https://mail.kde.org/mailman/listinfo/kimageshop/" rel="nofollow">https://mail.kde.org/mailman/listinfo/kimageshop/</a>
</p><p>Project Page: <a href="http://www.krita.org/" class="external free" title="http://www.krita.org/" rel="nofollow">http://www.krita.org/</a>
</p><p>Irc channel: #krita on irc.freenode.net
</p><p>Forums: <a href="http://forum.kde.org/viewforum.php?f=136" class="external free" title="http://forum.kde.org/viewforum.php?f=136" rel="nofollow">http://forum.kde.org/viewforum.php?f=136</a>.
</p><p>Wiki: <a href="http://community.kde.org/Krita" class="external free" title="http://community.kde.org/Krita" rel="nofollow">http://community.kde.org/Krita</a>
</p>
<a name="Project:_ABR_Brush_Support" id="Project:_ABR_Brush_Support"></a><h4> <span class="mw-headline"> Project: ABR Brush Support </span></h4>
<p><b>Brief Explanation</b>: Your task will be implement support for 
various features from brushes available in Photoshop. You will be 
extending current brush engines in Krita with set of features like 
texture painting, shape dynamics, flow, wet edges...The format is not 
documented and you will work with reverse-engineered information. Your 
task is to implement missing features, add mapping of the binary format 
to Krita XML format and possibly improve the reverse-engineering 
information.
</p><p><b>Mentor</b>:  Lukáš Tvrdý
</p><p><b>Used technologies</b>: C++, Qt
</p><p><b>Resource</b>: <a href="http://community.kde.org/Krita/ActionPlan2#Photoshop_brush_support_in_Krita" class="external free" title="http://community.kde.org/Krita/ActionPlan2#Photoshop_brush_support_in_Krita" rel="nofollow">http://community.kde.org/Krita/ActionPlan2#Photoshop_brush_support_in_Krita</a>
</p>
<a name="Project:_PSD_File_import.2Fexport_Support" id="Project:_PSD_File_import.2Fexport_Support"></a><h4> <span class="mw-headline"> Project: PSD File import/export Support </span></h4>
<p><b>Brief Explanation</b>: The industry standard for raster graphics 
is still Photoshop. This file format is closed. This project will entail
 bringing together the freely available information on the PSD file 
format and build an import/export filter upon the existing framework in 
Krita.
</p><p><b>Mentor</b>: Boudewijn Rempt
</p><p><b>Used technologies</b>: C++, Qt,
</p><p><b>Resources</b>: existing open source implementations like <a href="http://sourceforge.net/projects/libpsd/" class="external free" title="http://sourceforge.net/projects/libpsd/" rel="nofollow">http://sourceforge.net/projects/libpsd/</a> and <a href="http://git.gnome.org/browse/gimp/tree/plug-ins/file-psd" class="external free" title="http://git.gnome.org/browse/gimp/tree/plug-ins/file-psd" rel="nofollow">http://git.gnome.org/browse/gimp/tree/plug-ins/file-psd</a>
</p>
<a name="Project:_Flow_and_drying:_real_media_support" id="Project:_Flow_and_drying:_real_media_support"></a><h4> <span class="mw-headline"> Project: Flow and drying: real media support </span></h4>
<p><b>Brief Explanation</b>: As a painting application, Krita tries to 
make things possible for digital artists that were previously only 
available in “real” media. The effects of paint flowing, drying and 
being absorbed can be used to create interesting effects.  Particularly 
challenging is the flow of undo and redo.
</p><p><b>Mentor</b>: Boudewijn Rempt
</p><p><b>Used technologies</b>: C++, Qt
</p><p><b>Resources</b>: <a href="http://www.billbaxter.com/" class="external free" title="http://www.billbaxter.com" rel="nofollow">http://www.billbaxter.com</a> , <a href="http://www.levien.com/gimp/wetdream.html" class="external free" title="http://www.levien.com/gimp/wetdream.html" rel="nofollow">http://www.levien.com/gimp/wetdream.html</a> , <a href="http://research.edm.uhasselt.be/%7Etvanlaerhoven" class="external free" title="http://research.edm.uhasselt.be/~tvanlaerhoven" rel="nofollow">http://research.edm.uhasselt.be/~tvanlaerhoven</a>
</p>
<a name="Project:_3D_Sketching_tool" id="Project:_3D_Sketching_tool"></a><h4> <span class="mw-headline"> Project: 3D Sketching tool </span></h4>
<p><b>Brief Explanation</b>: When drawing comics, it can be particularly
 challenging to draw in the correct perspective. With a similar 
interface to Manga Studio, this project entails extending the guided 
painting interface of Krita into the third dimension, making sure 
parallel lines drawn by hand will have the correct perspective. This 
project can be extended by making it possible to import 3D objects 
created by, e.g. Google Sketchup
</p><p><b>Mentor</b>:  Lukáš Tvrdý or Cyrille Berger
</p><p><b>Used technologies</b>: C++, Qt,
</p>
<a name="Project:_Text_Balloon_support_for_Comics_work" id="Project:_Text_Balloon_support_for_Comics_work"></a><h4> <span class="mw-headline"> Project: Text Balloon support for Comics work </span></h4>
<p><b>Brief Explanation</b>: Comic books artists are one of the target 
user groups for Krita. A challenge when working on comic books is the 
placement and lettering of the text balloons -- and the 
internationalization! This project will entail creating vector-based 
support for translatable balloons that contain text that looks 
hand-written.
</p><p><b>Mentor</b>: Boudewijn Rempt
</p><p><b>Used technologies</b>: C++, Qt, SVG
</p><p><b>Expected results</b>:  a layer type that contains vector-shaped balloons of various types and textual content that can easily be internationalized.
</p><p><b>Resources</b>: <a href="http://en.wikipedia.org/wiki/Speech_balloon" class="external free" title="http://en.wikipedia.org/wiki/Speech_balloon" rel="nofollow">http://en.wikipedia.org/wiki/Speech_balloon</a>
</p>
<a name="Project:_Painting_and_Separation_of_3D_Textures" id="Project:_Painting_and_Separation_of_3D_Textures"></a><h4> <span class="mw-headline"> Project: Painting and Separation of 3D Textures </span></h4>
<p><b>Brief Explanation</b>: As one of it’s use cases, Krita’s vision 
statement includes painting textures for 3D. 3D textures are typically 
comprised of a number of separate black and white, RGB or RGBA images. 
Thus painting for textures typically requires painting on more than one 
single layer / channel at a time. For example painting a scratch into a 
metal surface may require painting black onto the bump channel, another 
colour on the diffuse channel, and another to the specularity channel 
(as well as possibly some others such as the displacement channel). All 
of these are affected simultaneously.
</p><p>Currently Krita’s painting system is only able to paint onto 
single layers at a time and brushes have not been designed in such a way
 as to allow adjusting multiple channels simultaneously as would be 
needed. This topic would require looking at how Krita’s current painting
 system could be extended to paint the necessary adjustments to the 
channels used in 3D rendering, show the textures created in OpenGL and 
then export those channels for use in 3D applications.
</p><p><b>Mentor</b>:  Lukáš Tvrdý
</p><p><b>Used technologies</b>: C++, Qt
</p><p><b>Resources</b>: <a href="http://www.krita.org/" class="external free" title="http://www.krita.org" rel="nofollow">http://www.krita.org</a>
</p>
<a name="Project:_Advanced_selection_using_SIOX" id="Project:_Advanced_selection_using_SIOX"></a><h4> <span class="mw-headline"> Project: Advanced selection using SIOX </span></h4>
<p><b>Brief explanation</b>: SIOX stands for Simple Interactive Object 
Extraction and is a solution for extracting foreground from still images
 with very little user interaction.
</p><p><b>Possible mentor</b>: Cyrille Berger  (or Sven Langkamp)
</p><p><b>Used Technologies</b>: C++, Qt
</p><p><b>Resources:</b>
</p>
<ul><li> <a href="http://www.siox.org/" class="external free" title="http://www.siox.org/" rel="nofollow">http://www.siox.org/</a> website describing the algorithm,
</li><li> <a href="https://bugs.kde.org/show_bug.cgi?id=110617" class="external free" title="https://bugs.kde.org/show_bug.cgi?id=110617" rel="nofollow">https://bugs.kde.org/show_bug.cgi?id=110617</a> tracking of the wish list on our bug reporting tool,
</li><li> <a href="http://websvn.kde.org/branches/koffice/1.6/koffice/krita/plugins/tools/tool_siox/?pathrev=579976" class="external free" title="http://websvn.kde.org/branches/koffice/1.6/koffice/krita/plugins/tools/tool_siox/?pathrev=579976" rel="nofollow">http://websvn.kde.org/branches/koffice/1.6/koffice/krita/plugins/tools/tool_siox/?pathrev=579976</a> code to a first attempt at implementing SIOX into Krita,
</li><li> <a href="http://en.wikipedia.org/wiki/Simple_Interactive_Object_Extraction" class="external free" title="http://en.wikipedia.org/wiki/Simple_Interactive_Object_Extraction" rel="nofollow">http://en.wikipedia.org/wiki/Simple_Interactive_Object_Extraction</a>
</li></ul>
<a name="Project:_Tagging_and_management_for_Krita_resources" id="Project:_Tagging_and_management_for_Krita_resources"></a><h4> <span class="mw-headline"> Project: Tagging and management for Krita resources </span></h4>
<p><b>Brief explanation</b>: Krita comes with a rich selection of 
resources: patterns, gradients, brushes, brush presets, soon materials 
for texture painting. These resources need to be managed: added, 
deleted, changes and tagged. Existing tagging specifications exist for 
Gimp and for Viaduct, and Krita should be compatible here. Integration 
with Get Hot New Stuff and Nepomuk are important aspects of this 
project. Especially interesting here is to make this system fit in the 
workflow of artists working on textures. There will be data structures 
and gui work.
</p><p><b>Expected results</b>: A functioning implementation of resource management and tagging.
</p><p><b>Used Technologies</b>: C++, Qt, digital art.
</p><p><b>Mentor</b>: Boudewijn Rempt
</p>
<a name="Project:_GPU-acceleration_for_Krita" id="Project:_GPU-acceleration_for_Krita"></a><h4> <span class="mw-headline"> Project: GPU-acceleration for Krita </span></h4>
<p><b>Brief explanation</b>: Although Krita was one of the first 
painting applications with OpenGL and shader support,  Krita uses the 
CPU for all its calculations. Until now the OpenGL and shader support 
have been used solely for display purposes, like the 3D brush model, 
real-time preview of gradients on the canvas. We would like to improve 
on this by using the GPU to improve the performance of blending layers, 
painting and transforming.
Expected results: optimized composition operators, transformation code
Used Technologies: C++, Qt, OpenGL, GLSL, OpenCL, General-Purspose GPU 
coding
</p><p><b>Mentor</b>:  Lukáš Tvrdý
</p>
<a name="Project:_GPU-backend_for_OpenGTL" id="Project:_GPU-backend_for_OpenGTL"></a><h4> <span class="mw-headline"> Project: GPU-backend for OpenGTL </span></h4>
<p><b>Brief explanation</b>: Krita uses the OpenGTL family of languages 
for easy creation of filters, colorspaces and possibly brush engines. 
OpenGTL currently uses LLVM to compile these scripts to code that runs 
on the CPU. Alternatively, compiling to the GPU would mean considerably 
performance improvements.
There are two possibilities to implement such a change:
</p>
<ul><li> Convert from the OpenGTL languages to OpenCL/GLSL and then run 
the converted shader on the GPU, this can be done by writing an AST 
output backend
</li><li> The mesa library uses llvm for compiling to the GPU from 
OpenCL/GLSL, so it should be possible to bypass the conversion and plug 
OpenGTL directly on the mesa library
</li></ul>
<p>The first possibility has the advantage to be more portable, the 
second solution might offer performance gain. The conversion approach 
should be implemented first, and then, the students could investigate 
the use of the mesa library when available.
</p><p>This is a very challenging task!
</p><p><b>Resources</b>: <a href="http://www.opengtl.org/" class="external free" title="http://www.opengtl.org" rel="nofollow">http://www.opengtl.org</a>
</p><p><b>Expected results</b>: OpenCL AST generator, report on the possibility to interface OpenGTL with mesa
</p><p><b>Used Technologies</b>: C++, GLSL, OpenCL (possibly LLVM)
</p><p><b>Mentor</b>: Cyrille Berger
</p>
<a name="Project:_Substrate_simulation" id="Project:_Substrate_simulation"></a><h4> <span class="mw-headline"> Project: Substrate simulation </span></h4>
<p><b>Brief explanation</b>: Substrates for painting and drawing have a 
direct influence on the result of the art. The goal of this project is 
bringing this richness of these effects to Krita. There is an existing 
body of literature and academic projects on this topic, with Bill Baxter
 and Tom van Laerhoven being among the best known researchers. For the 
right effect, we need to take care of the 3d structure of the substrate,
 it’s effect on paint tools -- smoothness, absorbency and other 
parameters. An interesting option is to make it possible to apply 
different substrates to existing paintings.
Expected results: an optional substrate simulation that works with all 
current Krita tools
</p><p><b>Used Technologies</b>: C++, Qt, OpenGL
</p><p><b>Mentor</b>: Boudewijn Rempt
</p>
<a name="Project:_Color_Mixing" id="Project:_Color_Mixing"></a><h4> <span class="mw-headline"> Project: Color Mixing </span></h4>
<p><b>Brief explanation</b>: Building on Emanuele Tamponi’s 
ground-breaking work on spectral colorspaces and color mixing, the topic
 of this project is to extend and finish this work and make is usable in
 Krita. Spectral colorspaces have the advantage that mixing colors 
produces the same result as in when mixing real-world paints. Problems 
are transparency (alpha channel) and composition.
</p><p><b>Expected results</b>: a color mixer that works, layer composition and painting.
</p><p><b>Used Technologies</b>: C++, Qt, color theory, mathematics
</p><p><b>Mentor</b>: Boudewijn Rempt
</p>
<a name="Project:_3D_Material_Image_Maps" id="Project:_3D_Material_Image_Maps"></a><h4> <span class="mw-headline"> Project: 3D Material Image Maps </span></h4>
<p><b>Brief explanation</b>: 3D materials are made up of a bunch of 
images called image maps. If the user could associate layers as image 
maps in Krita, and paint on all of them at the same time, artists could 
paint whole 3D materials - something currently only available in high 
end 3d apps like zBrush (not even Photoshop / Corel Painter). The trick 
is that the position of what's painted needs to match on every 
map/layer, but the colours vary. For example, a scratch on a human 
characters skin would have a red colour map, a white (=raised) bump map,
 a light grey (=semi-shiny) specularity map etc, all in the exact same 
location on the each image map. Traditional methods of trying to create 
each image from scratch or by manipulating the colour map are very, very
 slow and painful. A simple version of this could be done as follows:
</p><p><br>
1. Each layer has a toggle in the layers docker called "texture map" or 
similar. This is turned off by default. When active, the brush paints on
 *all* layers that currently have "texture map" active.
</p><p>2. When picking a colour, a dropdown lets the user pick "Default"
 or any active texture map layer. "Default" is just the current 
behaviour. If the user selects a layer in the dropdown, then the 
selected colour will be applied to that layer when painting on *any* 
layer.
</p><p>3. In the file or layer menu is an option "Export texture maps" 
which saves each texture map layer as an image. The layer name and 
extension appended automatically to the file name. For example, on a 
file called character.kra, the layer titled "colour" would be saved as 
"character-colour.jpg" (or whatever format was selected).
</p><p>For step 3, a simple, one click / shortcut, method is vital, as 
artists often have to check their material in their 3d app every few 
minutes, and wading through saving 10 layers individually, each with 
manual file naming and confirming file format settings each time is 
unacceptably slow. For any artist who requires this level of control, 
they can use Layers menu -&gt; "Save Layer as Image" already in krita.
</p><p>Allowing artists to paint a single material rather than creating 
multiple separate image maps by hand, would make Krita formidable for 
painting 3D textures, and the most advanced open source application for 
3D texturing.
</p><p><br>
<b>Used Technologies</b>: C++, Qt, color theory, mathematics
</p><p><b>Mentor</b>: Boudewijn Rempt
</p>
<a name="Project:_Shift_drag_sensors" id="Project:_Shift_drag_sensors"></a><h4> <span class="mw-headline"> Project: Shift drag sensors </span></h4>
<p><b>Brief explanation</b>: Currently shift+dragging the left mouse 
button horizontally can be used to alter the brush size. This is awesome
 as it minimises time wasted going back and forward between where you're
 painting and the brush editor a million times. It would be even better 
if brush softness, hue, value, page zoom etc could be changed in a 
similar way. Shift + drag could be used with any othe three mouse/stylus
 buttons (left - LMB, middle - MMB, and right - RMB click) both 
horizontally and vertically, giving us up to 6 things that could be 
quickly changed, right at the users cursor. This proposal is to make a 
system to link any of these shift+drag options to modify brush 
properties or page zooming in a fast, intuitive manner. For example 
shift + vertical LMB drag could modify brush softness, shift+rmb 
horizontal drag could be assigned to changing opacity, shift + mmb 
horizontal could be assigned to modifying brush hue, shift + mmb + 
vertical drag could be assigned to adjusting brush value and so on. 
Possibly these could be implemented as sensors and thus assigned to 
anything in a brush that currently has a curve.
</p><p><b>Used Technologies</b>: C++, Qt, color theory, mathematics
</p><p><b>Mentor</b>: Boudewijn Rempt
</p>
<a name="Project:_Tools_to_manipulate_Krita_files_.28.kra.29" id="Project:_Tools_to_manipulate_Krita_files_.28.kra.29"></a><h4> <span class="mw-headline"> Project: Tools to manipulate Krita files (.kra) </span></h4>
<p><b>Brief explanation</b>: The Krita file format is quite simple: a 
zip container with XML describing the image and easily parsable binary 
data for the layers. This project entails creating commandline tools to 
change colorspace and channel depth of krita files, split out krita 
files into the component layers, apply icc profiles, transpose layers, 
and compose files from other krita files and more.
</p><p><b>Used Technologies</b>: C++, Qt
</p><p><b>Mentor</b>: Boudewijn Rempt
</p>
<a name="Calligra_Stage" id="Calligra_Stage"></a><h3> <span class="mw-headline"> Calligra Stage  </span></h3>
<p>Stage is an easy to use yet still flexible KDE-based presentation application.
</p><p>Mailing-list: <a href="https://mail.kde.org/mailman/listinfo/calligra-devel" class="external free" title="https://mail.kde.org/mailman/listinfo/calligra-devel" rel="nofollow">https://mail.kde.org/mailman/listinfo/calligra-devel</a>
</p><p>Project Page: <a href="http://www.calligra-suite.org/stage/" class="external free" title="http://www.calligra-suite.org/stage/" rel="nofollow">http://www.calligra-suite.org/stage/</a>
</p><p>Irc channel: #calligra on irc.freenode.net
</p><p>Forums: <a href="http://forum.kde.org/viewforum.php?f=203" class="external free" title="http://forum.kde.org/viewforum.php?f=203" rel="nofollow">http://forum.kde.org/viewforum.php?f=203</a>
</p><p>Wiki: <a href="http://community.kde.org/Calligra/Stage" class="external free" title="http://community.kde.org/Calligra/Stage" rel="nofollow">http://community.kde.org/Calligra/Stage</a>
</p><p><br>
</p>
<a name="Project:_Plasma-based_Presentation_View" id="Project:_Plasma-based_Presentation_View"></a><h4> <span class="mw-headline"> Project: Plasma-based Presentation View </span></h4>
<p><b>Brief explanation</b>: The presentation view in presentation 
applications is used in multi-monitor displays to display information 
about the presentation on one screen while the full slides appear on 
another screen.  This provides information to the presenter that is not 
visible to the audience.  This information often includes a preview of 
the current and next slide, timing information, notes, and a list of 
slides for navigation.
</p><p>Stage already has a basic presentation view, but it is fairly 
limited in its capabilities and rigid in its layout.  This project would
 be to design a new presentation view for Stage using plasma, ideally 
using QML-based plasma widgets.  It would involve developing a plasma 
containment for the presentation view and plasma widgets for the 
individual elements needed by the view, as well as an interface for 
setting up the view.  These elements would, at a minimum, include: a 
preview of the current slide, a preview of the next slide, a list of 
slides, notes for the current slide, next and previous slide buttons, 
and a timer.  Users would need to be able to place, position, and resize
 the elements.  The presentation view would also need to support 
multiple different views that could be easily switched between during a 
presentation.
</p><p><b>Used Technologies</b>: C++, Qt, QML, Plasma
</p><p><b>Mentor</b>: see mailing list: <a href="https://mail.kde.org/mailman/listinfo/calligra-devel" class="external free" title="https://mail.kde.org/mailman/listinfo/calligra-devel" rel="nofollow">https://mail.kde.org/mailman/listinfo/calligra-devel</a>
</p><p><br>
</p>
<a name="Project:_Single-canvas_Presentation_Mode_.28like_Prezi_or_Zippl.29" id="Project:_Single-canvas_Presentation_Mode_.28like_Prezi_or_Zippl.29"></a><h4> <span class="mw-headline"> Project: Single-canvas Presentation Mode (like Prezi or Zippl)  </span></h4>
<p><b>Brief explanation</b>: Unlike normal slide-based presentation 
tools, single-canvas presentation tools have a single infinite canvas.  
Parts of that canvas are set of as frames, and the presentation 
progresses by moving from one of these frames to another in a 
pre-defined or arbitrary manner.  Alternate routes between frame scan be
 defined, as well as branch points where the presenter can select 
between multiple different ways to proceed from a given frame.  This 
allows for a non-linear presentation.
</p><p>This project would involve implementing a single-canvas 
presentation mode in Stage.  Users would need to be able to set up a 
canvas, set aside parts of that canvas as frames of arbitrary size, set 
paths between those frames (including a default path and alternate paths
 selected by clicking on elements in the presentation), zoom out to view
 the entire canvas, and zoom in on arbitrary parts of the canvas.
</p><p>See here for examples of other implementations:<br>
<a href="http://lizards.opensuse.org/2010/06/11/zippl-a-lightweigth-presentation-tool/" class="external free" title="http://lizards.opensuse.org/2010/06/11/zippl-a-lightweigth-presentation-tool/" rel="nofollow">http://lizards.opensuse.org/2010/06/11/zippl-a-lightweigth-presentation-tool/</a><br>
<a href="http://prezi.com/" class="external free" title="http://prezi.com/" rel="nofollow">http://prezi.com/</a>
</p><p><b>Used Technologies</b>: C++, Qt
</p><p><b>Mentor</b>:  see mailing list: <a href="https://mail.kde.org/mailman/listinfo/calligra-devel" class="external free" title="https://mail.kde.org/mailman/listinfo/calligra-devel" rel="nofollow">https://mail.kde.org/mailman/listinfo/calligra-devel</a>
</p><p><br>
</p>
<a name="Project:_Unified_Slide_Manager" id="Project:_Unified_Slide_Manager"></a><h4> <span class="mw-headline"> Project: Unified Slide Manager  </span></h4>
<p><b>Brief explanation</b>: Stage currently has three different, 
independent tools for managing slides: the Document Panel, the Slide 
Sorter, and the Custom Slideshow Editor.  These use completely different
 interfaces and have different capabilities (for instance only the Slide
 Sorter has drag-and-drop).  However, they are all used to manage slides
 in your presentation.
</p><p>This project would be to combine them into a single interface.  
The interface would normally reside in a docable panel similar to the 
existing Document panel.  By pressing a button, it will expand to take 
up most of the window, behaving as the Slide Sorter.  In this mode, 
there should be an additional, normally hidden panel at the bottom that 
the user can use to create add and remove slides from custom slideshows.
</p><p>In the process, the existing Document Panel and Slide Sorter 
should be modified to take better advantage of features provided by KDE 
and to provide better consistency with other KDE programs.  Changes 
would likely include: overlay buttons when you hover on a slide, 
drag-and-drop interfaces, menus on drag-and-drop, and selection effects 
similar to those seen in KDE-based file managers.
</p><p>See here for descriptions and mock-ups:<br>
<a href="https://bugs.kde.org/show_bug.cgi?id=254685" class="external free" title="https://bugs.kde.org/show_bug.cgi?id=254685" rel="nofollow">https://bugs.kde.org/show_bug.cgi?id=254685</a><br>
<a href="https://bugs.kde.org/show_bug.cgi?id=254687" class="external free" title="https://bugs.kde.org/show_bug.cgi?id=254687" rel="nofollow">https://bugs.kde.org/show_bug.cgi?id=254687</a><br>
<a href="https://bugs.kde.org/show_bug.cgi?id=254696" class="external free" title="https://bugs.kde.org/show_bug.cgi?id=254696" rel="nofollow">https://bugs.kde.org/show_bug.cgi?id=254696</a><br>
<a href="https://bugs.kde.org/show_bug.cgi?id=254705" class="external free" title="https://bugs.kde.org/show_bug.cgi?id=254705" rel="nofollow">https://bugs.kde.org/show_bug.cgi?id=254705</a>
</p><p><br>
<b>Used Technologies</b>: C++, Qt
</p><p><b>Mentor</b>:  see mailing list: <a href="https://mail.kde.org/mailman/listinfo/calligra-devel" class="external free" title="https://mail.kde.org/mailman/listinfo/calligra-devel" rel="nofollow">https://mail.kde.org/mailman/listinfo/calligra-devel</a>
</p>
<a name="Calligra_Plugins" id="Calligra_Plugins"></a><h3> <span class="mw-headline"> Calligra Plugins  </span></h3>
<p>As Calligra is quite powerful it is easy to add plugins to it that then can be used by all Calligra applications.
</p><p>Mailing-list: <a href="https://mail.kde.org/mailman/listinfo/calligra-devel" class="external free" title="https://mail.kde.org/mailman/listinfo/calligra-devel" rel="nofollow">https://mail.kde.org/mailman/listinfo/calligra-devel</a>
</p><p>Project Page: <a href="http://www.calligra-suite.org/" class="external free" title="http://www.calligra-suite.org" rel="nofollow">http://www.calligra-suite.org</a>
</p><p>Irc channel: #calligra on irc.freenode.net
</p><p>Forums: <a href="http://forum.kde.org/viewforum.php?f=203" class="external free" title="http://forum.kde.org/viewforum.php?f=203" rel="nofollow">http://forum.kde.org/viewforum.php?f=203</a>
</p><p>Wiki: <a href="http://community.kde.org/Calligra" class="external free" title="http://community.kde.org/Calligra" rel="nofollow">http://community.kde.org/Calligra</a>
</p>
<a name="Project:_Fontwork_Shape.2FTool" id="Project:_Fontwork_Shape.2FTool"></a><h4> <span class="mw-headline"> Project: Fontwork Shape/Tool </span></h4>
<p><b>Brief explanation</b>: Fontwork is a feature where text is drawn accoring to
some path definitions that define how the text should look like. This feature might be better know to some as "Wordart".
The aim of this project is to create a flake shape/tool that allows the user
</p>
<ul><li>to create fontwork shape
</li><li>make it possible to modify the text
</li><li>change the path to modify the look of the text
</li><li>Support for loading and saving into odf is also needed and should be compatible with OpenOffice.
</li><li>Additionally it would be nice to enhance the MS Office filters to convert "Wordart" to Fontwork when loading.
</li></ul>
<p><b>Expected Results</b>: Shape and Tool working with the above specified features
</p><p><b>Used Technologies</b>: C++, Qt
</p><p><b>Mentor</b>: Thorsten Zachmann
</p>
<a name="KWin" id="KWin"></a><h3> <span class="mw-headline"> KWin  </span></h3>
<p>KDE's window manager
</p><p><a href="http://techbase.kde.org/Projects/KWin" class="external text" title="http://techbase.kde.org/Projects/KWin" rel="nofollow">Techbase page</a> - <a href="https://mail.kde.org/mailman/listinfo/kwin" class="external text" title="https://mail.kde.org/mailman/listinfo/kwin" rel="nofollow">Mailinglist</a> - IRC channel: #kwin on Freenode.
</p>
<a name="Project:_Modularization_of_Workspace" id="Project:_Modularization_of_Workspace"></a><h4> <span class="mw-headline"> Project: Modularization of Workspace  </span></h4>
<p><b>Brief explanation:</b>
The Workspace class is the monolithic core of KWin. Nevertheless many 
parts of it do not depend on each other and can be split out of 
Workspace into own classes. The modularization is an important 
prerequisite to a port of KWin to Wayland and providing a small window 
manager for mobile devices.
</p><p><b>Expected results:</b>
A concept for what can be moved into own classes exists and several 
classes have been split out of Workspace. The X11 dependend code is 
moved into an own plugin. Plus if tests for the new classes are written.
</p><p><b>Knowledge Prerequisite:</b>
Qt/C++ and general understanding of window management. Plus for X11 knowledge
</p><p><b>Mentor:</b> Martin Gräßlin (mgraesslin)
</p>
<a name="Project:_Unit_Testing_Framework" id="Project:_Unit_Testing_Framework"></a><h4> <span class="mw-headline"> Project: Unit Testing Framework  </span></h4>
<p><b>Brief explanation:</b>
Testing a window manager is rather difficult as it requires a running 
instance and windows need to be created and interacted with. This 
project should set up a test framework based on Xephyr, KWin's scripting
 interface and QTest.
</p><p><b>Expected results:</b>
An infrastructure to test the core of KWin with simple KWin scripts 
should exist and several unit tests for existing functionality should be
 implemented
</p><p><b>Knowledge Prerequisite:</b>
Qt/C++, JavaScript, QTest
</p><p><b>Mentor:</b> Martin Gräßlin (mgraesslin)
</p>
<a name="Project:_Initial_Support_for_Wayland_Clients" id="Project:_Initial_Support_for_Wayland_Clients"></a><h4> <span class="mw-headline"> Project: Initial Support for Wayland Clients  </span></h4>
<p><b>Brief explanation:</b>
Wayland is the next iteration for composited window management. The task
 of this project is to add support for managing Wayland clients on X11 
and integrate them into the existing compositing rendering code for 
GLES.
</p><p><b>Expected results:</b>
KWin is able to manage Wayland clients and can render the clients. Plus 
for support to interact with them (move/activate/restack).
</p><p><b>Knowledge Prerequisite:</b>
Qt/C++ and general understanding of Window management. Plus for OpenGL knowledge
</p><p><b>Mentor:</b> Martin Gräßlin (mgraesslin)
</p>
<a name="Nepomuk" id="Nepomuk"></a><h3> <span class="mw-headline"> Nepomuk  </span></h3>
<p><a href="http://nepomuk.kde.org/" class="external text" title="http://nepomuk.kde.org" rel="nofollow">Website</a>- <a href="http://techbase.kde.org/Development/Tutorials#Nepomuk" class="external text" title="http://techbase.kde.org/Development/Tutorials#Nepomuk" rel="nofollow">Documentation/Howtos</a> - <a href="http://www.semanticdesktop.org/ontologies/" class="external text" title="http://www.semanticdesktop.org/ontologies/" rel="nofollow">Ontologies</a> - <a href="https://mail.kde.org/mailman/listinfo/nepomuk" class="external text" title="https://mail.kde.org/mailman/listinfo/nepomuk" rel="nofollow">Mailing list</a> - IRC channel: #nepomuk-kde on Freenode.
</p><p>(Also see the <a href="http://techbase.kde.org/Projects/Nepomuk" class="external text" title="http://techbase.kde.org/Projects/Nepomuk" rel="nofollow">Nepomuk techbase page</a> for a long list of Nepomuk-related ToDos and ideas.)
</p>
<a name="Project:_A_.22real.22_query_parser_and_Query_Builder_Widget" id="Project:_A_.22real.22_query_parser_and_Query_Builder_Widget"></a><h4> <span class="mw-headline"> Project: A "real" query parser and Query Builder Widget </span></h4>
<p><b>Brief explanation:</b> Nepomuk has a <a href="http://api.kde.org/4.x-api/kdelibs-apidocs/nepomuk/html/classNepomuk_1_1Query_1_1QueryParser.html" class="external text" title="http://api.kde.org/4.x-api/kdelibs-apidocs/nepomuk/html/classNepomuk_1_1Query_1_1QueryParser.html" rel="nofollow">query parser</a>
 which is used to handle input from the user in such situations as the 
KRunner interface or the Dolphin search bar. Currently this parser is 
one big HACK and in dire need of reimplementation.
</p><p>In addition we have no dedicated widget for query input which 
provides good auto-completion. The idea is fancy auto-completion in the 
search line-edit that proposes types, properties, and other resources. 
It should take usage frequency of properties, types, and property values
 into account (when that does not mean too big a performance downer). It
 could even try to use some built-in thesaurus allowing to match 
"nfo:Audio" from "audio", "music", "song", and others.
</p><p><b>Expected results:</b> A desktop query parser which is based on
 an actual grammar including support for nested terms (important when it
 comes to querying a graph), quotes (used to group keywords into one 
search term), resource URIs (it should be able to detect that a string 
is a resource URI and not a full text search term), namespace 
abbreviations ("nao:hasTag" should match exactly the one property while 
"hastag" can match multiple properties), as well as property and type 
expansion (this means that in "hastag:xyz" "hastag" should be expanded 
to an actual property URI.)
</p><p>The query parser should support the syntax supported by the current <a href="http://api.kde.org/4.x-api/kdelibs-apidocs/nepomuk/html/classNepomuk_1_1Query_1_1QueryParser.html" class="external text" title="http://api.kde.org/4.x-api/kdelibs-apidocs/nepomuk/html/classNepomuk_1_1Query_1_1QueryParser.html" rel="nofollow">query parser</a>
 and build upon that. One could think of extensions like mapping 
localized terms like "today" or "yesterday" to QDate or QDateTime values
 (depending on the range of the queried property), excluding unused 
properties altogether, supporting a deeper nesting of query terms like 
"author:(related:(hastag:nepomuk))", and so on.
</p><p>This parser should be used to implement auto-completion in a 
line-edit. Ideally this auto-completion would work well (only propose 
used properties, give preference to type, and so on) and look good (give
 multiple propositions in one widget, maybe with a result count). 
Examples include a simple expansion of "hastag:" to existing tags 
(sorted by use and not the complete list) or an expansion of "music" to 
"Query all music files" (ie. giving an explanation of query terms in the
 completion widget.
</p><p><b>Knowledge Prerequisite:</b> Previous experience with a parser 
generator would be good but is not required. A bit of Qt experience 
would be nice but again, is not required.
</p><p><b>Mentor:</b> Sebastian Trueg &lt;trueg@kde.org&gt;
</p><p><br>
</p>
<a name="Project:_Project_Integration" id="Project:_Project_Integration"></a><h4> <span class="mw-headline"> Project: Project Integration </span></h4>
<p><b>Brief explanation:</b> One lands up working on various different 
projects. It would be beneficial if Nepomuk could keep track of 
Projects. This would include remembering which files were involved, the 
people involved, TODO lists, etc. One of the most important aspects 
would be a form of browser integration, as research for a project is 
primarily done through a browser. There should be ways to annotate web 
pages, bookmarks, and even selected parts of a web page.
</p><p>A simple use case for a web-scrapping project in Python -
</p>
<ul><li> Create a project by the name of web-scrapper.
</li><li> Create its git repository. Nepomuk should understand that this
 is a coding project and here is where the source code would be. Maybe 
it can even store the source code management software's name.
</li><li> Read up about Python web-scrapping and bookmark some pages. 
These pages are given tags like "Python, Web-Scrapping, Manual, Talks" 
and are associated with the project.
</li><li> Download and watch one talk related to Python. Again Nepomuk should link the video file with the project.
</li><li> Add TODOs and other stuff for the project.
</li><li> Maybe this project is being done with someone. The project should be linked to  that person.
</li></ul>
<p><b>Expected results:</b> A backend for project management, and a nice GUI to manage them.
</p><p><b>Knowledge Prerequisite:</b> Qt and KDE development experience. Some knowledge about RDF and NRL would be nice.
</p><p><b>Mentor:</b> Vishesh Handa or Sebastian Trueg
</p><p><br>
</p>
<a name="Project:_Fancy_Bookmarking" id="Project:_Fancy_Bookmarking"></a><h4> <span class="mw-headline"> Project: Fancy Bookmarking </span></h4>
<p><b>Brief explanation:</b> Classical bookmarking means to simply put a
 link with a name into a hierarchy of links with names. The idea is to 
bookmark web pages by linking them to projects, tasks, persons, files, 
by tagging them, by commenting on them, and so on.
</p><p><b>Expected results:</b> The result is two-fold:
</p>
<ul><li> A simple way to annotate web pages in Konqueror or rekonq, to 
tag them, to relate them to resources and so on. This could be realized 
with a side panel, a popup menu, toolbar buttons, hotkeys, whatever.
</li><li> A way to open web pages by finding them through the 
annotations. A side panel seems a good first approach but there might be
 better ways. The side panel could provide two ways to find pages: 1. a 
simple search and 2. a display of pages related to the currently browsed
 page. The latter could be based on existing relations but also a 
keyword search of the current page using Scribo.
</li></ul>
<p><b>Knowledge Prerequisite:</b> Qt and KDE development experience.
</p><p><b>Mentor:</b> Sebastian Trueg or Vishesh Handa
</p><p><br>
</p>
<a name="Project:_Real_Digikam_Integration" id="Project:_Real_Digikam_Integration"></a><h4> <span class="mw-headline"> Project: Real Digikam Integration </span></h4>
<p><b>Brief explanation:</b> Currently Digikam uses its own database to 
store image metadata, ratings, and their own brand of tags. In addition 
it comes with a Nepomuk service that syncs some of the information with 
Nepomuk. The idea is to take full advantage of Nepomuk, store all 
information in Nepomuk, and implement additional fancy features on top 
of it.
</p><p><b>Expected results:</b> The result of the project should be 
two-fold: 1. a replacement for the current Digikam database with 
Nepomuk, 2. additional features based on Nepomuk. The latter includes 
listing of all photos from Nepomuk instead of the configured folders (or
 a combination), photo album creation through Nepomuk resources instead 
of folders (Each Album is a resource in Nepomuk with links to the photos
 in it - this allows for one photo to be in several albums without 
physical copies or symlinks), commenting of albums, and listing of 
albums or photos by other criteria though Nepomuk queries.
</p><p><b>Knowledge Prerequisite:</b> KDE experience would be preferred.
</p><p><b>Mentor:</b> Sebastian Trueg and hopefully someone from Digikam
</p><p><br>
</p>
<a name="Project:_Metadata_Writeback" id="Project:_Metadata_Writeback"></a><h4> <span class="mw-headline"> Project: Metadata Writeback </span></h4>
<p><b>Brief explanation:</b> Nepomuk allows to store all kinds of 
metadata for files. Some of this metadata like id3 tags of mp3 files 
could be written back to the files. See also the corresponding <a href="https://bugs.kde.org/show_bug.cgi?id=269365" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=269365" rel="nofollow">wish item</a>.
</p><p><b>Expected results:</b> A service or an extension of the Data 
management service that allows to write back certain information to the 
files. This writeback should be triggered by the metadata change in 
Nepomuk. It would be nice to have a plugin system that allows to add new
 formats for writeback easily.
</p><p><b>Knowledge Prerequisite:</b> C++, basic Qt or KDE is always nice but not necessary.
</p><p><b>Mentor:</b> Sebastian Trueg
</p><p><br>
</p>
<a name="Plasma" id="Plasma"></a><h3> <span class="mw-headline"> Plasma  </span></h3>
<p><a href="http://plasma.kde.org/" class="external text" title="http://plasma.kde.org" rel="nofollow">Website</a> - <a href="https://mail.kde.org/mailman/listinfo/panel-dev" class="external text" title="https://mail.kde.org/mailman/listinfo/panel-dev" rel="nofollow">Mailing list</a> - IRC channel: #plasma on Freenode.
</p>
<a name="Project:_QML_QtComponents_set" id="Project:_QML_QtComponents_set"></a><h4> <span class="mw-headline"> Project: QML QtComponents set </span></h4>
<p><b>Brief explanation:</b> The QtComponents project is aiming to 
provide an api and a series of widget sets completely based upon QML. 
the actual implementation is platform-dependent, so KDE needs its own 
platform specific set made with the plasma theming mechanism,for both 
the desktop and the mobile.
</p><p><b>Expected results:</b> A complete set of QtComponents for the 
use in QML based plasmoid for the desktop, if there is enough time, the 
start of a mobile version (with as less as possible changed from the 
desktop case)
</p><p><b>Knowledge Prerequisite:</b> both QML and Qt C++ programming are useful (and preferred), most of it can be learned on the way
</p><p><b>Mentor:</b> either Marco Martin and/or Artur De Souza
</p>
<a name="Project:_Educational_desktop" id="Project:_Educational_desktop"></a><h4> <span class="mw-headline"> Project: Educational desktop </span></h4>
<p><b>Brief explanation:</b> The flexibility of the Plasma Desktop shell
 can bring desktops fine tuned to a particular use case: With the KDE 
edu project, KDE has a strong offering of educational software. To 
further leverage the stength of the KDE platform, a customized Plasma 
desktop for the educational environment can make KDE the obvious choice.
</p><p><b>Expected results:</b> A set of plasmoids and a custom plasma 
layout (with eventual modifications to the desktop shell itself) to do a
 strong customization. In designing those plasmoids, the mobile use case
 has to be taken into account as well.
</p><p><b>Knowledge Prerequisite:</b> Qt/C++, probably QML
</p><p><b>Mentor:</b>
</p>
<a name="Project:_Plasma_media_center_first_release" id="Project:_Plasma_media_center_first_release"></a><h4> <span class="mw-headline"> Project: Plasma media center first release </span></h4>
<p><b>Brief explanation:</b> The Plasma media center project needs some 
work to get to a first alpha release quality: mostly a reingeneering of 
the components of the main gui and porting the graphical elements to qml
</p><p><b>Expected results:</b> a basically working media center at least with an index of local media files (videos, pictures and music)
</p><p><b>Knowledge Prerequisite:</b> Qt C++, QML and some ideas on the Plasma architecture, QML can be learned on the way
</p><p><b>Mentor:</b> Marco Martin
</p>
<a name="Project:_QML-ify_Plasma_widgets" id="Project:_QML-ify_Plasma_widgets"></a><h4> <span class="mw-headline"> Project: QML-ify Plasma widgets </span></h4>
<p><b>Brief explanation:</b> The Plasma2 library will be heavily based on QML, probably dropping qgraphicswidget support altogether.
All the default plasmoid set will heve to be ported to be either pure QML/Javascript or QML/C++ in the meantime.
</p><p><b>Expected results:</b> At least 6-7 minor plasmoids ported to QML or some (to define) of the main ones (like kickoff,taskbar, systray, whatever)
</p><p><b>Knowledge Prerequisite:</b> Qt C++ some idea on Plasma and kdelibs arch, already knowing something of QML helps
</p><p><b>Mentor:</b> Marco MArtin
</p>
<a name="Project:_Move_Plasma_Functionality_in_Compositor" id="Project:_Move_Plasma_Functionality_in_Compositor"></a><h4> <span class="mw-headline"> Project: Move Plasma Functionality in Compositor  </span></h4>
<p><b>Brief explanation:</b>
Plasma uses lots of functionality which are better served in the window 
and compositing manager (KWin). For example Plasma uses an own glow 
animation before showing a hidden panel. This could be OpenGL 
accelerated when moved into KWin. Other examples involve Wallpaper 
rendering or Tooltips.
</p><p>It would be the task of the project to identify these areas and 
to discuss strategies with the Plasma and KWin community how to better 
handle these areas and to implement the solution.
</p><p><b>Expected results:</b>
Rendering functionality moved from Plasma to KWin with fallback for legacy (non-composited) and other window managers.
</p><p><b>Knowledge Prerequisite:</b>
C++/Qt, basic understanding of X, OpenGL useful but not required.
</p><p><b>Mentor:</b>
</p>
<a name="Project:_Helping_in_libplasma2_development" id="Project:_Helping_in_libplasma2_development"></a><h4> <span class="mw-headline"> Project: Helping in libplasma2 development </span></h4>
<p><b>Brief explanation:</b>
There are several things that needs to be done in both designing and preparing libplasma for the next major redesign.
</p><p><b>Expected results:</b>
A thing can be building a working branch on git that doesn't have any 
derecated class of functions and is completely without widgets (so will 
be unable to load classic c++ plasmoids) but that can still load qml 
based ones.
</p><p><b>Knowledge Prerequisite:</b>
C++/Qt
</p><p><b>Mentor:</b>
</p>
<a name="Project:_Plasma_mobile_components" id="Project:_Plasma_mobile_components"></a><h4> <span class="mw-headline"> Project: Plasma mobile components </span></h4>
<p><b>Brief explanation:</b>
Develop (and polish the ones already started) components for a classic 
mobile ui, such as application laucher grid, plasmoids container, 
notifications and systemtray plasmoid and so on.
</p><p><b>Expected results:</b>
A quite classic mobile shell at a near production quality, while 
alternate containments and plasmoids will make posible to experiment new
 and more radical user interfaces.
</p><p><b>Knowledge Prerequisite:</b>
C++/Qt, QML
</p><p><b>Mentor:</b> Marco Martin
</p>
<a name="Project:_Integration_of_home_automation_system_in_desktop" id="Project:_Integration_of_home_automation_system_in_desktop"></a><h4> <span class="mw-headline"> Project: Integration of home automation system in desktop </span></h4>
<p><b>Brief explanation:</b> Home automation services need and can be 
very powerfull with an integration in desktop, this project aim to 
provide UIs and configuration tools for an home automation server like 
Domogik¹ with the help of Plasma technologies. This project need to 
identify and discuss how to implement these concept and do links with 
Plasma Media Center or others part of desktop.
</p><p><b>Expected results:</b> A set of plasmoid dedicated to 
supervision and contorl of a house, a way to ajust advanced parameters 
(perhaps with an abstraction layer for help future implementation of 
other automation server).
</p><p><b>Knowledge Prerequisite:</b> ... &amp; basics skills in home automation
</p><p><b>Mentor:</b> Marco Martin or Aaron Seigo
</p>
<a name="Project:_Spread_activities_to_applications" id="Project:_Spread_activities_to_applications"></a><h4> <span class="mw-headline"> Project: Spread activities to applications </span></h4>
<p><b>Brief explanation:</b> Activities are growing up to bi much more 
than different 'desktops'. Programs (from KDE and 3rd party) should 
start talking with the activities service to provide the info about the 
documents (and web pages, filesystem locations, etc.) they access, 
modify.
</p><p><b>Expected results:</b> Patch all main KDE apps to do the above 
(including KRunner and similar). Modify Places, Bookmarks models to show
 different stuff when in different activities. Provide a KIO for 
browsing files per activity and date/time, and a runner which will 
favour apps/documents with high rating calculated from the usage stats.
</p><p><b>Knowledge Prerequisite:</b> C++, Qt. Nepomuk and Zeitgeist a plus.
</p><p><b>Mentor:</b> Ivan Čukić
</p>
<a name="Phonon" id="Phonon"></a><h3> <span class="mw-headline"> Phonon  </span></h3>
<p>Abstraction library for sound and video support. Used by KDE notifications, Amarok, Dragon Player and Qt Software.
</p><p><a href="http://phonon.kde.org/" class="external text" title="http://phonon.kde.org" rel="nofollow">Website</a> - <a href="https://mail.kde.org/mailman/listinfo/phonon-backends" class="external text" title="https://mail.kde.org/mailman/listinfo/phonon-backends" rel="nofollow">Mailing list</a> - IRC channel: #phonon on Freenode.
</p>
<a name="Project:_QML.2FQGraphicsScene_Video_Painting" id="Project:_QML.2FQGraphicsScene_Video_Painting"></a><h4> <span class="mw-headline"> Project: QML/QGraphicsScene Video Painting </span></h4>
<p><b>Brief explanation:</b> QML is the new declarative user interface 
description language for Qt. Unlike the traditional widget based design 
approach it works on an underlying graphics scene requiring painting 
within that scene. Phonon however depends on the presence of a widget to
 do video painting. An alternative painting architecture needs to be 
introduced to permit tight integration with QML and QGraphicsScene based
 applications such as Plasma. Ideally using different approaches (e.g. 
paintaing using OpenGL shaders and surface painting using 
QImage/QPainter).
</p><p><b>Expected results:</b> Phonon gains a VideoGraphicsItem for use in QGraphicsScenes (plus for actual QML package)
</p><p><b>Knowledge Prerequisite:</b> Qt/C++, plus for QML, OpenGL, GStreamer and libvlc.
</p><p><b>Mentor:</b> TBA
</p>
<a name="Project:_Encoding" id="Project:_Encoding"></a><h4> <span class="mw-headline"> Project: Encoding </span></h4>
<p><b>Brief explanation:</b> Phonon currently has the capability to 
easily read any audio or video format known to the backend. This results
 is a very large number of supported formats. Many of the decoders in 
the backends also have a corresponding encoder. Phonon also recently 
acquired the ability to record from audio/video devices. It then makes 
sense that someone would want to use Phonon not only as a playback 
framework, but as a recording framework. A use case for this would be 
writing a simple application to use Phonon for recording a video from a 
webcam and microphone and immediately writing a .ogg file for later 
upload to a website such as Youtube. Alternatively, the encoded .ogg 
data can be sent to libshout and on to an icecast server for internet 
radio.
</p><p><b>Expected results:</b> Phonon gains a new kind of MediaNode 
that accepts media data as input and generates an encoded stream 
available as a QIODevice. Essentially, the inverse operation of an 
AbstractMediaStream.
</p><p><b>Knowledge Prerequisite:</b> Qt/C++, plus for GStreamer and libvlc.
</p><p><b>Mentor:</b> TBA
</p>
<a name="Project:_Multi-Channel_Audio_KCM_Module" id="Project:_Multi-Channel_Audio_KCM_Module"></a><h4> <span class="mw-headline"> Project: Multi-Channel Audio KCM Module </span></h4>
<p><b>Brief explanation:</b> With the increasing availability of 
multi-channel sound cards (more than 2 channels) and the popularity of 
surround-sound movies, having a tool to properly configure and calibrate
 surround-sound speakers is essential.  However, Linux in general lacks a
 good surround-sound configuration GUI.  This project would be to 
implement such a GUI in KDE, at the very least supporting pulseaudio but
 optionally supporting ALSA or other audio frameworks as well.  It would
 be part of the multimedia KCM module.
</p><p>The tool would include two components.  First would be a 
multi-channel calibration tool, with test sounds and individual volume 
controls for each channel in the same interface.  Once the channels have
 been calibrated, the ranges for the kmix volume sliders for the 
channels would be automatically re-scaled to hide these changes in the 
normal kmix interface.  KDE already has a KCM module for testing 
surround-sound speakers, but this tool doesn't allow you to configure 
the channels.  It also lacks features found in other such tools, like 
being able to play sounds from all speakers in sequence.
</p><p>The second component would be a point-and-click interface for 
connecting software sound channels to physical sound card channels, as 
well as connecting sound card channels to other sound car channels or 
software channels to other software channels.  This would be 
particularly useful for people with custom speaker set-ups or that are 
using multiple 2-channel sounds cards to implement surround sound.  It 
would also be useful, for instance, for routing microphone devices 
directly to speakers, routing stereo sound to multiple speakers in a 
surround-sound setup, combining channels from multi-channel sound for 
stereo speakers, or routing sound from production software directly to 
recording software.  There is currently no GUI for this in Linux at all 
that I am aware of, so this would be a big help.
</p><p><b>Expected results:</b> An interface for calibrating surround-sound speakers, and a tool for connecting audio channels to other audio channels.
</p><p><b>References:</b> See <a href="http://colin.guthr.ie/2010/07/speaker-setup-now-or-forever-hold-your-peace/" class="external text" title="http://colin.guthr.ie/2010/07/speaker-setup-now-or-forever-hold-your-peace/" rel="nofollow">"Speaker Setup Now or Forever Hold Your Peace"</a> for the work already done in this area
</p><p><b>Knowledge Prerequisite:</b> Qt/C++, plus for pulseaudio
</p><p><b>Mentor:</b> Colin Guthrie
</p>
<a name="Project:_Cross-backend_Equalizer_support_with_PulseAudio" id="Project:_Cross-backend_Equalizer_support_with_PulseAudio"></a><h4> <span class="mw-headline"> Project: Cross-backend Equalizer support with PulseAudio </span></h4>
<p><b>Brief explanation:</b> The git master version of PulseAudio (to be
 released as 1.0) contains an "Equalizer" sink that acts as a filter on 
top of a hardware device. By extending how the existing PulseSupport 
class works in Phonon it should be possible to provide access to such 
equalization to any backend. At present, when PulseAudio is in use, 
Phonon will already bypass the backend when dealing with volume changes,
 utilising PulseAudio's per-stream volume controls. It is expected that 
presenting the equalizer sink would be done in a similar way.
</p><p><b>Expected results:</b> When present, equalization will be presented to the user via Phonon.
</p><p><b>References:</b> <a href="https://sites.google.com/site/nevion/projects/pulseaudio-equalizer" class="external text" title="https://sites.google.com/site/nevion/projects/pulseaudio-equalizer" rel="nofollow">pulseaudio-equalizer</a> <a href="https://sites.google.com/site/nevion/projects/qpaeq" class="external text" title="https://sites.google.com/site/nevion/projects/qpaeq" rel="nofollow">qpaeq</a>
</p><p><b>Knowledge Prerequisite:</b> Qt/C++, Knowledge of PulseAudio 
would be a plus. Knowledge of Asynchronous programming principles would 
also be desirable but not essential.
</p><p><b>Mentor:</b> Colin Guthrie
</p>
<a name="Project:_Testing_Framework" id="Project:_Testing_Framework"></a><h4> <span class="mw-headline"> Project: Testing Framework </span></h4>
<p><b>Brief explanation:</b> Phonon has a very distributed project 
structure. Playback capability is actually provided by so-called 
backends which act as plugins to the Phonon library. Every supported 
multimedia framework has its own backend. This causes an interesting 
situation with regards to automated testing and quality assurance. While
 there is a set of unit tests in the Phonon library itself, they are 
incomplete and only test a fraction of the available capabilities. A new
 more scalable testing framework/setup is needed to ensure all backends 
act according to the expected behavior outlined by the Phonon library.
</p><p><b>Expected results:</b> A testing framework to quality assure backends.
</p><p><b>Knowledge Prerequisite:</b> C++, plus for Qt
</p><p><b>Mentor:</b> TBA
</p>
<a name="Kate" id="Kate"></a><h3> <span class="mw-headline"> Kate  </span></h3>
<p>Kate is a powerful programmer's editor.
</p><p><br> <a href="http://www.kate-editor.org/" class="external text" title="http://www.kate-editor.org" rel="nofollow">Website</a> - <a href="https://mail.kde.org/mailman/listinfo/kwrite-devel" class="external text" title="https://mail.kde.org/mailman/listinfo/kwrite-devel" rel="nofollow">Mailing list</a> - IRC channel: #kate on Freenode.
</p>
<a name="Project:_Code_Folding" id="Project:_Code_Folding"></a><h4> <span class="mw-headline"> Project: Code Folding </span></h4>
<p><b>Brief explanation:</b> Kate supports code folding for multiple 
languages. The current implementation has the drawback that it is no 
longer maintained and that many bugs have accumulated over the last 
years. Goal of this project would be to inspect the current 
implementation and design a new one based on the knowledge gained from 
that. (or, if needed, reimplementation from scratch)
</p><p><b>Expected results:</b> A new well documented implementation of 
the code folding. Main design goals should be maintainability, 
performance and simplicity.
</p><p><b>Knowledge Prerequisite:</b> C++/Qt, high motivation
</p><p><b>Mentor:</b> Dominik Haumann / Christoph Cullmann
</p>
<a name="Project:_Script_IDE" id="Project:_Script_IDE"></a><h4> <span class="mw-headline"> Project: Script IDE </span></h4>
<p><b>Brief explanation:</b> Kate supports versatile scripting in its 
part. This is for example used for the indentation scripts and some of 
the commands available in the kate command line. Still missing is any 
real integration into the Kate GUI which allows easy creating of new 
script, debugging them and for example binding the interactively to 
shortcuts. The goal of this project would be to implement a Kate 
application plugin which provides the user with the means to edit, debug
 and run scripts for the kate part. In addition the interfaces to the 
kate part should be extended to allow access to the scripting features. 
For example the plugin could provide auto-completion for the scripting 
API or/and a own highlighting for kate js scripts could be done.
</p><p><b>Expected results:</b> A Kate plugin providing some scripting IDE to create and debug kate part scripts.
</p><p><b>Knowledge Prerequisite:</b> C++/Qt, high motivation
</p><p><b>Mentor:</b> Dominik Haumann / Christoph Cullmann
</p>
<a name="Project:_Modeline_Editor" id="Project:_Modeline_Editor"></a><h4> <span class="mw-headline"> Project: Modeline Editor </span></h4>
<p><b>Brief explanation:</b> Kate supports modelines, also called <a href="http://docs.kde.org/stable/en/kdesdk/kate/config-variables.html" class="external text" title="http://docs.kde.org/stable/en/kdesdk/kate/config-variables.html" rel="nofollow">document variables</a>.
 Through this, users can configure individual settings for specific 
documents. The task of this project is to add a modeline editor, that 
can write/change the document variables in the document.
</p><p><b>Expected results:</b> A modeline editor that is able to edit 
the current modeliens. This editor could be reused in the "Modes" tab in
 Kate's config page.
</p><p><b>Knowledge Prerequisite:</b> C++/Qt, Qt-Designer, high motivation
</p><p><b>Mentor:</b> Dominik Haumann / Christoph Cullmann
</p>
<a name="Project:_Further_improve_the_Vi_Input_Mode" id="Project:_Further_improve_the_Vi_Input_Mode"></a><h4> <span class="mw-headline"> Project: Further improve the Vi Input Mode </span></h4>
<p><b>Brief explanation:</b> Kate supports a modal, Vi[m]-like editing 
mode. The support for Vim features is already quite good in some areas, 
but there is more to be done:
</p>
<ul><li> A “jump list” should be maintained of the last cursor 
positions, making it possible to jump back to earlier positions and 
forward again (ctrl+i/ctrl+o in vim)
</li><li> More command line mode commands should be supported, and it should be possible to use marks in ranges, i.e. “:'a,'bs/foo/bar/”
</li><li> A thorough test suite
</li><li> [your favourite feature]
</li></ul>
<p><b>Expected results:</b> An improved vi input mode for kate
</p><p><b>Knowledge Prerequisite:</b> C++/Qt, high motivation
</p><p><b>Mentor:</b> Erlend Hamberg
</p><p><br>
</p>
<a name="Project:_Elastic_Tabstop_support" id="Project:_Elastic_Tabstop_support"></a><h4> <span class="mw-headline"> Project: Elastic Tabstop support </span></h4>
<p><b>Brief explanation:</b> <a href="http://nickgravgaard.com/elastictabstops/" class="external text" title="http://nickgravgaard.com/elastictabstops/" rel="nofollow">Elastic tabstops</a>
 are a way to visually align code automatically. Current ways of 
indentation are a relic from the typewriter era and it is time to try 
new concepts. Elastic tabstops
</p>
<ul><li> Put an end to the “tabs vs spaces” debate
</li><li> Save the programmer from tinkering with alignment
</li><li> Allow the use of proportional fonts
</li><li> Degrade gracefully for non-supporting editors
</li></ul>
<p>Apart from implementing the feature itself, one should care about the following:
</p>
<ul><li> the option “align dynamically wrapped lines to the indentation 
level” has to be extended to allow the setting “align dynamically 
wrapped lines to the last tabstop”
</li><li> A way has to be found to integrate existing options such as tab width and indentation step width.
</li></ul>
<p><b>Expected results:</b> A working option to use elastic tabstops instead of traditional alignment.
</p><p><b>Knowledge Prerequisite:</b> C++, Qt
</p><p><b>Mentor:</b> Joseph Wenninger
</p>
<a name="Rekonq" id="Rekonq"></a><h3> <span class="mw-headline"> Rekonq </span></h3>
<p>Rekonq is a web browser for KDE based on WebKit. It first focuses on 
being a light, fast &amp; clean way to access to net. Its development is
 doubly based on using the new amazing features offered by the WebKit 
rendering engine and on the rock solid network KDE technologies.
</p>
<a name="Project:__Adblock_improvements_.26_elements_manipulation" id="Project:__Adblock_improvements_.26_elements_manipulation"></a><h4> <span class="mw-headline"> Project:  Adblock improvements &amp; elements manipulation </span></h4>
<p><b>Brief explanation:</b>
</p><p>Rekonq currently has an initial implementation of an ads blocking
 mechanism. This project aims to expand it providing the feature parity 
with AdBlockPlus and implement a sort of HTML elements manipulation 
system (enable it, and then click on the page on the elements you want 
to hide. When you're ok, save your changes, reset them or leave them 
just for this time)
</p><p><br>
<b>Expected results:</b>
</p><p>An improvements in the adblock rules handling, some (new) tests 
to check adblock behavior and performance, the elements manipulation 
feature with (possibly) the ability to save and remember applied 
changes.
</p><p><b>Knowledge Prerequisite:</b>
</p><p>C++ programming and hopefully Qt
</p><p><br>
<b>Mentor:</b>
<a href="mailto:adjam7@gmail.com" class="external text" title="mailto:adjam7@gmail.com" rel="nofollow">Andrea Diamantini</a>
</p>
<a name="Project:_Plasma_KPart_for_Rekonq" id="Project:_Plasma_KPart_for_Rekonq"></a><h4> <span class="mw-headline"> Project: Plasma KPart for Rekonq </span></h4>
<p><b>Brief explanation:</b>
</p><p>Rekonq provides a specific webpage displayed when the user clicks
 on the "new tab" button. This webpage has features like: previews of 
favorite pages, previews of closed tabs, an history list, a bookmark 
list, and a download list.
The goal of this project is develop the same features as this webpage 
but using plasmoids displayed in a Plasma KPart.
Additional plasmoids, eg. RSS feeder, could be integrated.
</p><p><b>Expected results:</b>
</p>
<ul><li>Customizable new tab page.
</li><li>Plasma theme integration
</li><li>Same plasmoids inside Rekonq and on the desktop
</li></ul>
<p><b>Mentor:</b>
<a href="mailto:megabigbug@yahoo.fr" class="external text" title="mailto:megabigbug@yahoo.fr" rel="nofollow">Lionel Chauvin</a>
</p>
<a name="Project:_Tab_Grouping_using_sessions_and_Panorama-like_view" id="Project:_Tab_Grouping_using_sessions_and_Panorama-like_view"></a><h4> <span class="mw-headline"> Project: Tab Grouping using sessions and Panorama-like view </span></h4>
<p><b>Brief explanation:</b>
</p><p>When tabbed browsing was introduced, it was a revolution. Since 
then, people have evolved different patterns of using tabs. Many people 
use tabs to remember web pages that they want to check out later. Many 
people who work on 2-3 projects often need to group their tabs 
separately to avoid confusion. Many users have more than 30-40 tabs open
 at a time, and this proves to be a clutter with Rekonq's current tab 
browsing system.
The "Tab grouping" to implement here aims to be merged with the 
"sessions" concept, being a "session" a particular window state (with a 
list of tabs opened).
Users can organize and save the sessions trought a Firefox 4 
panorama-like view and reload them independently
</p>
<pre><b>Expected results:</b>
</pre>
<ul><li> Improve the actual session manager (actually just used to 
restore tabs on crash or on startup) to support the session saving 
mechanism.
</li><li> Implement a system to reload session at startup and at runtime. (kate-like?)
</li><li> Panorama-like view to organize and save tabs groups (GraphicsWidget based?)
</li><li> Add support for pinned tabs that are visible accross sessions.
</li></ul>
<p><b>Knowledge Prerequisite:</b>
</p><p>C++, Qt. Appreciated will be experience with the Qt Graphics View Framework and HTML/CSS/Javascript.
</p><p><b>Mentor:</b>
<a href="mailto:adjam7@gmail.com" class="external text" title="mailto:adjam7@gmail.com" rel="nofollow">Andrea Diamantini</a>
</p>
<a name="ownCloud" id="ownCloud"></a><h3> <span class="mw-headline"> ownCloud  </span></h3>
<p>An open personal cloud which runs on your personal server. It enables
 accessing your data from all of your devices. Sharing with other people
 is also possible. It support automatic backups, versioning and 
encryption.
</p><p><br> <a href="http://owncloud.org/" class="external text" title="http://ownCloud.org" rel="nofollow">Website</a> - <a href="https://mail.kde.org/mailman/listinfo/owncloud" class="external text" title="https://mail.kde.org/mailman/listinfo/owncloud" rel="nofollow">Mailing list</a> - IRC channel: #owncloud on Freenode.
</p>
<a name="Project:_Local_sync_client" id="Project:_Local_sync_client"></a><h4> <span class="mw-headline"> Project: Local sync client </span></h4>
<p><b>Brief explanation:</b>
Build a client to sync your ownCloud files with your local disc to enable offline use.
</p><p><b>Expected results:</b>
Development of an application you run on your local PC. This 
applications syncs local folders with folders on your personal ownCloud 
server everytime you are online. This applications needs a GUI written 
in KDE/Qt to configure the ownCloud url, folders, login and password. 
The applications sits in the systray and informs the user about the 
syncing progress or sync conflicts. The idea is that the clients mounts 
the ownCloud folders via WebDAV into a "hidden" directory and syncs the 
folders via rsync or an own syncing script. Errors should be reported to
 the user. To quote Frank from the mailing list:
</p><p>"The client should:
</p>
<pre>1. read a configuration file so see which folders to sync and which owncloud server to use.
2. mount the owncloud server via fuse or a different tool into a hidden directory.
3. call a syncing tool like csync to sync between the local directory and the mounted directory
4. unmount owncloud
5. write a log-file about the synced files and potential conflicts which the user has to solve.
</pre>
<p>The client should be as portable as possible of course."
</p><p>Current inactive projects such as Cloudsync or 
owncloud-sync-client (both on Gitorious) may possibly be starting places
 worth investigating.
</p><p><b>Knowledge Prerequisite:</b>
Python, Ruby, PHP or C++ and KDE/Qt depending on the technology you 
choose for the desktop syncing client. Enthusiasm for Cloud/Desktop 
integration and trying new things.
</p><p><b>Mentor:</b>
Kyle Cunningham? Robin Appleman? Frank K?
</p>
<a name="Project:_PIM_web_interface" id="Project:_PIM_web_interface"></a><h4> <span class="mw-headline"> Project: PIM web interface </span></h4>
<p><b>Brief explanation:</b>
Create a web interface for viewing and editing PIM data stored in ownCloud.
</p><p><b>Expected results:</b>
Creation of a web interface that integrates in ownCloud, the interface 
should provide read/write access to calendar and contants that are 
stored on the ownCloud server (probably as vcard/ical files). It should 
provide a feature set as closely to desktop clients as possible.
</p><p><b>Knowledge Prerequisite:</b>
PHP, HTML, CSS and javascript. Enthusiasm free software cloud solutions and trying new things.
</p><p><b>Mentor:</b>
Kyle Cunningham? Robin Appleman? Frank K?
</p>
<a name="Project:_Sharing" id="Project:_Sharing"></a><h4> <span class="mw-headline"> Project: Sharing </span></h4>
<p><b>Brief explanation:</b>
Create a method of sharing files and other things with users on the same ownCloud server.
</p><p><b>Expected results:</b>
Creation of a way for users to share their files with other users and 
provide a generic way for plugins to provide sharing of other things 
(eg. pim data).
The file sharing part should at least provide a way to view and edit 
permissions of files and folders and a simple way to view things shared 
with you
</p><p><b>Knowledge Prerequisite:</b>
PHP, HTML, CSS and javascript. Enthusiasm free software cloud solutions and trying new things.
</p><p><b>Mentor:</b>
Kyle Cunningham? Robin Appleman? Frank K?
</p>
<a name="KDE_Usability" id="KDE_Usability"></a><h3> <span class="mw-headline"> KDE Usability </span></h3>
<a name="Project:_Usability_Survey_Framework" id="Project:_Usability_Survey_Framework"></a><h4> <span class="mw-headline"> Project: Usability Survey Framework </span></h4>
<p><b>Brief explanation:</b>
Surveys are one of many methods used in creating more usable software. 
Surveys allow designers to collect information about user's experiences 
and usability problems with software. A Usability Survey Framework would
 allow designers and developers to create small, custom surveys that can
 be attached to events or services. Users could subscribe to the 
Usability Survey Service and opt in to current studies. Survey studies 
could be one-time surveys, or several survey entries over a period of 
time.
</p><p>For example, if we wanted to learn more about how users interact 
with workspaces, a survey could occasionally open when a user accesses 
or configures the workspace. If we wanted to learn more about the 
Plasmoid installation process, we could open a survey when a user 
installs the next plasmoid.
</p><p>A Usability Survey Framework would help users become more 
involved in KDE through direct participation. Developers would be able 
to easily design and launch surveys to collect important usability 
feedback. Designers would be able to easily conduct usability studies.
</p><p><b>Expected results:</b>
The Usability Survey Framework could be implemented as a web service, 
downloadable Plasma widget, or mini application. It should be an easily 
configurable survey that collects data based on an event.
</p><p>Possible features:
</p>
<ul><li> Uses XML for survey design to make it easy to create and launch new surveys
</li><li> Uploading or emailing data at end of study
</li><li> Can be a single survey, or a survey study over a period of time
</li><li> Configured to open on a specific event
</li></ul>
<p><b>Knowledge Prerequisite:</b>
JavaScript, C++. Qt/KDE/Plasma knowledge would help greatly.
</p><p><b>Mentor:</b>
Celeste Lyn Paul, someone else?
</p>
<a name="KDE_SDK" id="KDE_SDK"></a><h3> <span class="mw-headline"> KDE SDK </span></h3>
<a name="Project:_Umbrello_UML_Modeller_QGraphicsView_Port" id="Project:_Umbrello_UML_Modeller_QGraphicsView_Port"></a><h4> <span class="mw-headline"> Project: Umbrello UML Modeller QGraphicsView Port  </span></h4>
<p><b>Brief explanation:</b>
Umbrello UML Modeller uses the old and limited Q3Canvas class.  There is
 an unfinished port to QGraphicsView that should be completed.
</p><p><b>Expected results:</b>
A stable Umbrello using QGraphicsView.
</p><p><b>Knowledge Prerequisite:</b>
Programming Qt.  Basic understanding of UML.
</p><p><b>Mentor:</b>
Jonathan Riddell
</p>
<a name="Project:_Umbrello_UML_Modeller_Port_to_Calligra_Flake" id="Project:_Umbrello_UML_Modeller_Port_to_Calligra_Flake"></a><h4> <span class="mw-headline"> Project: Umbrello UML Modeller Port to Calligra Flake </span></h4>
<p><b>Brief explanation:</b>
Umbrello UML Modeller uses the old and limited Q3Canvas class. Flake Calligra Flow <a href="http://www.calligra-suite.org/flow/" class="external autonumber" title="http://www.calligra-suite.org/flow/" rel="nofollow">[4]</a> (formelly Kivio) has very much similar graphics capabilities as UML Modeller.
</p><p><b>Expected results:</b>
A stable Umbrello using Calligra Flake, sharing code with Calligra Flow.
</p><p><b>Knowledge Prerequisite:</b>
Programming Qt.  Basic understanding of UML.
</p><p><b>Mentor:</b>
Calligra developers
</p>
<a name="Project:_A_Mercurial_plug-in_for_Dolphin" id="Project:_A_Mercurial_plug-in_for_Dolphin"></a><h4> <span class="mw-headline"> Project: A Mercurial plug-in for Dolphin </span></h4>
<p><b>Brief explanation:</b>
At the moment, KDESDK includes Dolphin plug-ins for the version control 
systems Subversion and Git. They provide a GUI to access the basic 
functionality of these VCSs via context menu entries. The current 
versioning state (e.g. "locally changed" or "conflicting") is also 
displayed through icon overlays.
</p><p>To complement support for the major systems, this project aims to implement such a plug-in for Mercurial.
</p><p>Current plug-ins: <a href="http://websvn.kde.org/trunk/KDE/kdesdk/dolphin-plugins/" class="external text" title="http://websvn.kde.org/trunk/KDE/kdesdk/dolphin-plugins/" rel="nofollow">KDESDK/dolphin-plugins</a><br>
The interface to implement: <a href="https://projects.kde.org/projects/kde/kdebase/kde-baseapps/repository/revisions/master/entry/lib/konq/kversioncontrolplugin.h" class="external text" title="https://projects.kde.org/projects/kde/kdebase/kde-baseapps/repository/revisions/master/entry/lib/konq/kversioncontrolplugin.h" rel="nofollow">kversioncontrolplugin.h</a><br>
A corresponding feature request: <a href="https://bugs.kde.org/show_bug.cgi?id=164732" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=164732" rel="nofollow">Bug 164732</a>
</p><p><b>Expected results:</b>
Version states are displayed correctly. Basic Mercurial functionality is
 accessible via the context menu. Intuitive dialog design.
</p><p><b>Knowledge Prerequisite:</b><br>
Profound knowledge of Mercurial concepts, commands and workflows.<br>
C++, Qt (mostly QtGui)<br>
<i>No</i> knowledge of Dolphin source code required.
</p><p><br>
<b>Mentors:</b>
Sebastian Dörner &lt;sebastian@sebastian-doerner.de&gt;, Peter Penz &lt;peter.penz19@gmail.com&gt;
</p>
<a name="Okular" id="Okular"></a><h3> <span class="mw-headline"> Okular </span></h3>
<a name="Project:_Advanced_text_layout_recognition_engine" id="Project:_Advanced_text_layout_recognition_engine"></a><h4> <span class="mw-headline"> Project: Advanced text layout recognition engine </span></h4>
<p><b>Brief explanation:</b>
Okular has a very naive algorithm to detect the layout in text in which 
basically everything is considered to be layouted in a line. You will 
need to know some text layouting algorithms to improve the detection of 
columns in text so that text selection works better.
</p><p>See relevant entry in KDE bugzilla about it: <a href="https://bugs.kde.org/show_bug.cgi?id=161324" class="external text" title="https://bugs.kde.org/show_bug.cgi?id=161324" rel="nofollow">161324</a>
</p><p><b>Expected results</b>
A better text selection experience for the user.
</p><p><b>Knowledge Prerequisite</b>
C++, Qt
</p><p><b>Mentor</b>
Albert Astals Cid
</p>
<a name="Project:_Annotation_writing_in_PDF_documents" id="Project:_Annotation_writing_in_PDF_documents"></a><h4> <span class="mw-headline"> Project: Annotation writing in PDF documents </span></h4>
<p><b>Brief explanation:</b>
Okular currently can read the annotations in PDF documents, but it 
cannot change in any way the ones in the documents -- meaning add, 
remove, and edit.
This is due to to limitations in the Poppler library, which lately got 
very few annotation editing capabilities, with none of them being 
exposed through the poppler-qt4 frontend (and so usable by e.g. Okular).
 The task is to work on either Poppler to allow to edit annotations in 
poppler-qt4 (possibly enabling more editing options in the poppler 
core), and to make Okular able to make the changes in the PDF documents,
 taking also care of the annotations currently stored externally.
</p><p><b>Expected results</b>
The possibility to change/edit the annotations in a PDF document, and to edit more annotation options in Okular.
</p><p><b>Knowledge Prerequisite</b>
C++, Qt
</p><p><b>Mentor</b>
Pino Toscano
</p>
<a name="Knights" id="Knights"></a><h3> <span class="mw-headline"> Knights  </span></h3>
<p>Knights is a chess program for KDE, it resides in Extragear/Games. It
 supports local plays, playing against a computer engine, an opponent on
 a chess server, and also watching two computers. It uses the KDE 
technologies to provide a consistent look-and-feel with Oxygen colors 
and Plasma clocks.
</p><p><a href="http://noughmad.eu/knights" class="external text" title="http://noughmad.eu/knights" rel="nofollow">Knights web site</a>
</p>
<a name="Project:_Saving.2C_loading_and_analyzing_games" id="Project:_Saving.2C_loading_and_analyzing_games"></a><h4> <span class="mw-headline"> Project: Saving, loading and analyzing games </span></h4>
<p><b>Brief explanation:</b>
Knights currently does not support any form of storing and analyzing 
games, expect for simple undo and redo. This suffices for casual play, 
but for serious play something more powerful is needed.
</p><p>One part of the project is to enable saving board positions to a 
file, and reading from it at a different time. This should be done using
 a standard format (PGN), so that external games can be analyzed with 
Knights and vice-versa.
</p><p>Another part is an "analysis" mode, where a playerc can freely 
move both his and the opponent's pieces. The interface should rate the 
current board position, provide hints, maintain alternative timelines 
for comparison, etc. The student should be in contact with chess players
 (could be on a forum or IRC) to know the other important features of 
such a mode.
</p><p><b>Expected results:</b>
Ability to save move history to a file, and read from it at a later time.
An advanced 'analysis' mode for direct manipulation and interaction with a chess engine, with tools to help the player.
</p><p><b>Knowledge Prerequisite:</b> Qt, C++. Knowledge of Chess rules is not needed, but some contact with chess players is preferred.
</p><p><b>Mentor:</b> I will try to participate as a student this year, 
so I can't be a mentor and I'm looking for someone else. Knights' 
current codebase is quite small and not complicated. I'm available at <a href="mailto:miha@noughmad.eu" class="external text" title="mailto:miha@noughmad.eu" rel="nofollow">Miha Čančula</a>. 
</p>
<a name="Gluon" id="Gluon"></a><h3> <span class="mw-headline">Gluon</span></h3>
<p>Gluon is a Free and Open Source framework for creating and 
distributing games - supporting the flow of the idea all the way from 
the author to the player of the finished game, and back.
</p><p><a href="http://gluon.gamingfreedom.org/" class="external text" title="http://gluon.gamingfreedom.org/" rel="nofollow">Gluon Website</a>
</p><p><a href="http://gluon.gamingfreedom.org/node/40" class="external text" title="http://gluon.gamingfreedom.org/node/40" rel="nofollow">Contacting the Gluon team (irc, email etc)</a>
</p>
<a name="Project:_Code_completion_in_Gluon_Creator" id="Project:_Code_completion_in_Gluon_Creator"></a><h4> <span class="mw-headline">Project: Code completion in Gluon Creator</span></h4>
<p><b>Brief explanation:</b>
Gluon based games have game logic written in ECMAScript, and while it 
uses the powerful katepart for editing the scripts, it lacks completion 
beyond simple word completion. KDevelop has a powerful code knowledge 
system which can be used by other projects through the kdevplatform 
libraries. This project is about taking the beginnings of 
ECMAScript/javascript support in KDevPlatform and extending it, and then
 integrating it into Gluon Creator.
</p><p><b>Expected results:</b>
</p>
<ul><li> The completion of ECMAScript/JavaScript support for KDevPlatform
</li><li> The integration of this support into Gluon Creator
</li></ul>
<p><b>Knowledge Prerequisite:</b>
Qt/KDE development (includes C++ &amp; git). Knowledge of KDevPlatform an advantage, as is knowledge of ECMAScript
</p><p>Skill level: medium to high.
</p><p><b>Mentor:</b>
Arjen Hiemstra and Dan Leinir Turthra Jensen, with assistance from someone on the KDevelop team
</p>
<a name="Project:_Version_control_integration_in_Gluon_Creator" id="Project:_Version_control_integration_in_Gluon_Creator"></a><h4> <span class="mw-headline">Project: Version control integration in Gluon Creator</span></h4>
<p><b>Brief explanation:</b>
Gluon Creator is designed to be usable by people who are not 
programmers, and as such the version management integration has to be 
simple. Aleix Pol has created a system used in KDevelop which is 
powerful and very useful for programmers, which we suggest is used for 
advanced version handling in Gluon Creator. This would then be exposed 
more directly in the user interface, creating a work flow which assists 
in the use of the version control system.
</p><p><b>Expected results:</b>
</p>
<ul><li> Integration of Aleix Pol's kdevplatform based version control integration, or similar
</li><li> Creating commits as annotated saves
</li><li> Revert to earlier commits, with each commit shown in a timeline fashion
</li><li> Pulling from and pushing to remote repository
</li><li> Addition of easy selection, deletion and creation of branches in the Project dock, as well as merging from other branches
</li></ul>
<p><b>Knowledge Prerequisite:</b>
Qt/KDE development (includes C++ &amp; git)
</p><p>Skill level: medium.
</p><p><b>Mentor:</b>
Arjen Hiemstra and Dan Leinir Turthra Jensen
</p>
<a name="Project:_Achievements.2Fstatistics_system" id="Project:_Achievements.2Fstatistics_system"></a><h4> <span class="mw-headline">Project: Achievements/statistics system</span></h4>
<p><b>Brief explanation:</b>
Many digital distribution platforms, such as XBox Live, PlayStation Home
 and Steam, have a system by which players are granted certain trophies 
by performing certain tasks in the games they play. Even though they can
 be, these tasks are not necessarily a part of the normal game-play: For
 example it might be that you have played a certain level a specific 
number of times. The Open Collaboration Services have, since version 
1.7, contained <a href="http://www.freedesktop.org/wiki/Specifications/open-collaboration-services-draft#Achievements" class="external text" title="http://www.freedesktop.org/wiki/Specifications/open-collaboration-services-draft#Achievements" rel="nofollow">a generalised system for storing achievements and the progress a user has made on them</a>.
</p><p>This project is to integrate the OCS Achievements module into 
Gluon, and to create a general system by which statistics required for 
tracking progress in a game can be generated.
</p><p><b>Expected results:</b>
</p>
<ul><li> A set of Components and Assets for storing and tracking statistics of game interactions
</li><li> Same for handling the Achievements themselves
</li></ul>
<p><b>Knowledge Prerequisite:</b>
Qt/KDE development (includes C++ &amp; git). Knowledge of achievements systems a plus.
</p><p>Skill level: medium to high.
</p><p><b>Mentor:</b>
Arjen Hiemstra and Dan Leinir Turthra Jensen
</p>
<a name="Project:_Dynamic_Shader_Generator" id="Project:_Dynamic_Shader_Generator"></a><h4> <span class="mw-headline">Project: Dynamic Shader Generator</span></h4>
<p><b>Brief explanation:</b>
Gluon these days features a completely shader-based graphics library. 
One of the issues with this is that you need to create shaders, which is
 not trivial for most people. This project would alleviate that problem 
by creating a system similar to many professional graphics applications,
 where shaders are created by linking small elements - nodes - together.
 If time permits, this would also be exposed in the interface properly 
through a node-based editor.
</p><p><b>Expected results:</b>
A system that is able to create basic shaders and can be extended to create more advanced shaders.
</p><p><b>Knowledge Prerequisite:</b>
Qt/KDE development (includes C++ &amp; git), OpenGL/GLSL and a general knowledge of graphics programming is a definite must.
</p><p>Skill level: medium to high.
</p><p><b>Mentor:</b>
Arjen Hiemstra and Dan Leinir Turthra Jensen
</p>
<a name="Project:_Integrating_SMARTS_Game_AI_system" id="Project:_Integrating_SMARTS_Game_AI_system"></a><h4> <span class="mw-headline">Project: Integrating SMARTS Game AI system</span></h4>
<p><b>Brief explanation:</b>
In the fall of 2009 and spring of 2010, three students at Aalborg 
University created a game AI system based on the simple Behavior Tree 
concept for use with Gluon. As this was an educational project, however,
 while the project was completed, the code was never merged into Gluon. 
This project is to take the project code, clean it up and adapt to new 
Gluon APIs, and if time permits to create a more pleasantly built and 
better integrated editor for the behavior trees.
</p><p><b>Expected results:</b>
</p>
<ul><li> A new sub-module in Gluon containing the standalone parts of the <a href="http://leinir.dk/perceived-challenge/" class="external text" title="http://leinir.dk/perceived-challenge/" rel="nofollow">SMARTS AI system</a> (<a href="http://gitorious.org/gluon-bt/" class="external text" title="http://gitorious.org/gluon-bt/" rel="nofollow">gitorious</a>)
</li><li> Cleaned up integration of the SMARTS components and assets
</li><li> Optional: An editor KPart for integration directly in Gluon Creator
</li></ul>
<p><b>Knowledge prerequisite:</b>
C++ development experience, Qt/KDE development experience an advantage 
but can be disregarded if knowledgeable of other modern OOP frameworks.
</p><p>Knowledge of the Behavior Tree concept in general an advantage, 
but this can be gained in a reasonably short amount of time (as both 
video tutorials on the concept as well as the reports from the 
university projects SMARTS resulted from are available, containing 
descriptions of this).
</p><p>Skill level: Novice to medium.
</p><p><b>Mentor:</b>
Dan Leinir Turthra Jensen and Arjen Hiemstra
</p>
<a name="Project:_XInput2_Backend_for_Gluon_Input" id="Project:_XInput2_Backend_for_Gluon_Input"></a><h4> <span class="mw-headline">Project: XInput2 Backend for Gluon Input</span></h4>
<p><b>Brief explanation:</b>
The Gluon Input system is designed to support multiple back-ends for 
optimal integration with the underlying system. Since its inception, a 
system based on <a href="http://en.wikipedia.org/wiki/Evdev" class="external text" title="http://en.wikipedia.org/wiki/Evdev" rel="nofollow">evdev</a>
 has been used. This system proved to be cumbersome due to evdev devices
 only being accessible by the root user. A fallback system was created 
using the input handling in Qt. However, Qt does not distinguish between
 multiple devices and also does not support specialised game input 
devices like joysticks.
</p><p>The primary goal of this task is to create a back-end for Gluon on Linux that uses the <a href="http://www.x.org/wiki/XI2" class="external text" title="http://www.x.org/wiki/XI2" rel="nofollow">XInput2</a>
 extension for X for device access. This extension provides support for 
multiple devices to X windows and is currently being built upon for 
multi-touch support in X. Ideally, this back-end would expose all 
available input devices to the Gluon Input system and support adding and
 removing devices based on connect/disconnect events. A secondary goal 
would be to have this input information available in Gluon Creator and 
games built using Gluon.
</p><p><b>Expected results:</b>
</p>
<ul><li> A Gluon Input back-end based on the XInput2 extension.
</li><li> If time permits, enhancements to the user-facing side of the 
input system that enable multiple devices to be used by game developers.
</li></ul>
<p><b>Knowledge prerequisite:</b>
C/C++ development experience using Qt. Experience with development using X and related libraries is a definite advantage.
</p><p>Skill level: Medium to High.
</p><p><b>Mentor:</b>
Arjen Hiemstra and Dan Leinir Turthra Jensen
</p>
<a name="Telepathy" id="Telepathy"></a><h3> <span class="mw-headline">Telepathy</span></h3>
<p>Telepathy is a cross-desktop framework for real-time communication 
and collaboration - think IM, Voice/Video Conferencing and Collaborative
 document editing/gaming/etc.
</p><p>More information:
</p>
<ul><li><a href="http://telepathy.freedesktop.org/" class="external text" title="http://telepathy.freedesktop.org" rel="nofollow">Telepathy Framework</a>
</li><li><a href="http://community.kde.org/Telepathy" class="external text" title="http://community.kde.org/Telepathy" rel="nofollow">Telepathy-KDE</a>
</li><li>We can be found on IRC in #kde-telepathy
</li></ul>
<a name="Project:_Distributed_Shared-State_system_based_on_DBus_tubes_for_KDE_apps" id="Project:_Distributed_Shared-State_system_based_on_DBus_tubes_for_KDE_apps"></a><h4> <span class="mw-headline">Project: Distributed Shared-State system based on DBus tubes for KDE apps</span></h4>
<p><b>Brief explanation:</b>
Telepathy DBus tubes provide an easy way for collaborative applications 
such as KWhiteboard to be built. However, a common issue is the need of 
applications wishing to use DBus Tubes is the need for a way for 
participants to keep their application states synchronised in the 
absence of a single "server". This is an intellectually challenging 
project as well as requiring coding, so please ensure you join us on IRC
 and get to know us and the project before submitting a proposal for 
this project.
</p><p><b>Expected results:</b>
</p>
<ul><li> A distributed-state mechanism generic enough to be used by any 
KDE application wishing to build a serverless collaborative system on 
top of DBus tubes.
</li><li> A sample implementation using this state layer, either by 
adding basic functionality to KWhiteboard or another application of your
 choice.
</li></ul>
<p><b>Knowledge Prerequisite:</b>
</p>
<ul><li> Qt/KDE development (includes C++ &amp; git).
</li><li> Telepathy development
</li><li> As a minimum, a basic understanding of how DBus works
</li><li> A desire to take on a challenging project
</li></ul>
<p>Skill level: high.
</p><p><b>Mentor:</b>
George Goldberg
</p>
<a name="Project:_Amarok_Playlist_Sharing" id="Project:_Amarok_Playlist_Sharing"></a><h4> <span class="mw-headline">Project: Amarok Playlist Sharing</span></h4>
<p>See <a href="http://community.kde.org/GSoC/2011/Ideas#Project:_Playlist_sharing" class="external autonumber" title="http://community.kde.org/GSoC/2011/Ideas#Project:_Playlist_sharing" rel="nofollow">[5]</a>
</p>
<a name="Project:_Innovative_new_UI.2FInteraction_Methods" id="Project:_Innovative_new_UI.2FInteraction_Methods"></a><h4> <span class="mw-headline">Project: Innovative new UI/Interaction Methods</span></h4>
<p><b>Brief explanation:</b>
Telepathy allows real-time communication to be integrated far deeper 
into the computing experience. Come up with some interesting novel ideas
 for how to make this integration happen (new ways of displaying 
information, novel plasma integration methods, you name it), and 
implement them.
</p><p><b>Expected results:</b>
</p>
<ul><li> This project is very open ended, but we would expect to see a 
series of deliverables outlined in the proposal along with some 
justification for why they are interesting ideas. Sufficient research 
should be undertaken at the proposal stage to ensure the deliverables 
are suitable and achievable within the context of the rest of the KDE 
Software Compilation and Workspaces.
</li></ul>
<p><b>Knowledge Prerequisite:</b>
</p>
<ul><li> Qt/KDE development (includes C++ &amp; git).
</li><li> At least basic Telepathy development
</li><li> A good imagination and a keen interest in innovative interaction design.
</li></ul>
<p>Skill level: medium.
</p><p><b>Mentor:</b>
George Goldberg
</p>
<a name="Project:_Multi-Player_gaming_in_KDE_games" id="Project:_Multi-Player_gaming_in_KDE_games"></a><h4> <span class="mw-headline">Project: Multi-Player gaming in KDE games</span></h4>
<p><b>Brief explanation:</b>
Telepathy tubes allow collaborative features to easily be added to any 
application. This project is to develop multiplayer support on top of 
telepathy for the KDEgames suite of games. If you wish to propose this 
idea, it is important to discuss your proposal both with the KDE games 
team and the KDE Telepathy team.
</p><p><b>Expected results:</b>
</p>
<ul><li> Infrastructure for Telepathy Tubes based multiplayer gaming in KDE games.
</li><li> Support for one or more games being played multiplayer over Telepathy Tubes.
</li></ul>
<p><b>Knowledge Prerequisite:</b>
</p>
<ul><li> Qt/KDE development (includes C++ &amp; git).
</li><li> At least basic Telepathy development
</li></ul>
<p>Skill level: medium.
</p><p><b>Mentor:</b>
Someone from KDE Telepathy and someone from KDE Games.
</p><p><br>
</p>
<a name="simon" id="simon"></a><h3> <span class="mw-headline"> simon </span></h3>
<p>simon is an open source speech recognition system using many parts of the KDE infrastructure.
You can find out more about us on <a href="http://simon-listens.org/" class="external text" title="http://simon-listens.org" rel="nofollow">our homepage</a>, <a href="http://simon-listens.blogspot.com/" class="external text" title="http://simon-listens.blogspot.com" rel="nofollow">blog</a> or the <a href="http://sourceforge.net/projects/speech2text" class="external text" title="http://sourceforge.net/projects/speech2text" rel="nofollow">development site</a>.
</p><p>There is also a <a href="http://www.youtube.com/watch?v=bjJCl72f-Gs" class="external text" title="http://www.youtube.com/watch?v=bjJCl72f-Gs" rel="nofollow">demonstration video on youtube</a>.
</p>
<a name="Project:_simon_workspace_integration_.28Voice_control_the_KDE_desktop.29" id="Project:_simon_workspace_integration_.28Voice_control_the_KDE_desktop.29"></a><h4> <span class="mw-headline"> Project: simon workspace integration (Voice control the KDE desktop) </span></h4>
<p><b>Brief explanation</b>
The speech recognition system simon is currently based around the 
concept of being individually configured for each application that is 
going to be voice controlled. While this works fine for smaller 
installations it gets tedious in the many cases where no special 
configuration is needed and the user "just" wants to browse application 
menus, select buttons, etc.
</p><p>The protocol AT-SPI (version 2) exports information about control
 elements of applications on the DBus interface at a toolkit level (no 
effort needed from application developers). This system is already used 
for screen readers like Orca.
</p><p>simon could parse this information of running programs, generate 
the necessary vocabulary, grammar and commands to trigger any on-screen 
buttons, menus, etc.
</p><p>This would give simon control of running Qt and GTK applications 
without any specific configuration and greatly enhance the use of simon 
in a full-fledged desktop.
</p><p><b>Expected results</b>
A simon plugin that listens to AT-SPI messages on DBus and exports the necessary vocabulary / grammar / commands.
</p><p><b>Knowledge Prerequisite</b>
C++, Qt, Motivation
</p><p><b>Mentor</b>
Peter Grasch &lt;<a href="mailto:grasch@simon-listens.org" class="external text" title="mailto:grasch@simon-listens.org" rel="nofollow">grasch@simon-listens.org</a>&gt;
</p><p><b>Contact</b>
Besides myself personally (<a href="mailto:grasch@simon-listens.org" class="external text" title="mailto:grasch@simon-listens.org" rel="nofollow">grasch@simon-listens.org</a>) you can also contact us at <a href="mailto:office@simon-listens.org" class="external text" title="mailto:office@simon-listens.org" rel="nofollow">office@simon-listens.org</a> and through the <a href="http://sourceforge.net/projects/speech2text/forums/forum/672426" class="external text" title="http://sourceforge.net/projects/speech2text/forums/forum/672426" rel="nofollow">forum on our developer page</a>.
</p><p><b>Resources</b>
The command infrastructure is heavily documented (<a href="http://bedahr.org/simon//doc/class_command_manager.html" class="external text" title="http://bedahr.org/simon//doc/class_command_manager.html" rel="nofollow">an older snapshot can be found online</a>).
</p>
<a name="Project:_Context_dependent_speech_recognition" id="Project:_Context_dependent_speech_recognition"></a><h4> <span class="mw-headline"> Project: Context dependent speech recognition </span></h4>
<p><b>Brief explanation</b>
As speech recognition is at its core a statistical analysis, recognition
 accuracy decreases as more "candidates" need to be considered. 
Therefore a system that only distinguishes between the numbers from 1-9 
will always work better than the same system trying to differentiate 
between hundreds of words. In short: It's easier to separate "One" and 
"Nine" than "One", "Con", "Oh", etc.
In a speech control scenario only a couple of commands are relevant in 
each context. simons scenario system could be used and combined with a 
newly developed context recognition system (probably based on running 
applications or even the current activity as exposed by KDEs activity 
system) to deactivate words when they are not needed at the moment.
</p><p><b>Expected results</b>
Context recognition system and an extended simon / simond protocol to 
relay context information. The scenario format and UI would also need to
 be adapted to allow the user to define in which contexts the scenario 
should become active.
The result would be a greatly improved recognition performance in almost
 any practical use case.
</p><p><b>Knowledge Prerequisite</b>
C++, Qt, a lot of motivation&nbsp;:)
</p><p><b>Mentor</b>
Peter Grasch &lt;<a href="mailto:grasch@simon-listens.org" class="external text" title="mailto:grasch@simon-listens.org" rel="nofollow">grasch@simon-listens.org</a>&gt;
</p><p><b>Contact</b>
Besides myself personally (<a href="mailto:grasch@simon-listens.org" class="external text" title="mailto:grasch@simon-listens.org" rel="nofollow">grasch@simon-listens.org</a>) you can also contact us at <a href="mailto:office@simon-listens.org" class="external text" title="mailto:office@simon-listens.org" rel="nofollow">office@simon-listens.org</a> and through the <a href="http://sourceforge.net/projects/speech2text/forums/forum/672426" class="external text" title="http://sourceforge.net/projects/speech2text/forums/forum/672426" rel="nofollow">forum on our developer page</a>.
</p><p><br>
</p>
<a name="Project:_Voxforge_integration" id="Project:_Voxforge_integration"></a><h4> <span class="mw-headline"> Project: Voxforge integration </span></h4>
<p><b>Brief explanation</b>
The <a href="http://voxforge.org/" class="external text" title="http://voxforge.org" rel="nofollow">voxforge project</a>
 aims to create GPL acoustic models. Using these models, simon does not 
need to be trained at all to work. The models are speaker independent 
and - at least for English - are already good enough for fairly accurate
 recognition.
</p><p>To further improve the Voxforge models (especially for other 
languages), the Voxforge homepage provides a Java applet to submit new 
speech by recording voice samples. However, users do not get a direct 
benefit from contributing voice to the project.
</p><p>By integrating Voxforge in simon, users could train their local 
Voxforge copy and submit the collected samples to Voxforge. They would 
directly improve the recognition for them personally but also help to 
further improve the general Voxforge model.
</p><p>To sum up: A lot of users already train their acoustic model 
locally. If we could gather all that data in a convenient way for the 
end user, the general model would rapidly improve and end-user training 
wouldn't even be necessary in most cases anymore.
</p><p><b>Knowledge Prerequisite</b>
C++, Qt
</p><p><b>Mentor</b>
Peter Grasch &lt;<a href="mailto:grasch@simon-listens.org" class="external text" title="mailto:grasch@simon-listens.org" rel="nofollow">grasch@simon-listens.org</a>&gt;
</p><p><b>Contact</b>
Besides myself personally (<a href="mailto:grasch@simon-listens.org" class="external text" title="mailto:grasch@simon-listens.org" rel="nofollow">grasch@simon-listens.org</a>) you can also contact us at <a href="mailto:office@simon-listens.org" class="external text" title="mailto:office@simon-listens.org" rel="nofollow">office@simon-listens.org</a> and through the <a href="http://sourceforge.net/projects/speech2text/forums/forum/672426" class="external text" title="http://sourceforge.net/projects/speech2text/forums/forum/672426" rel="nofollow">forum on our developer page</a>.
</p>
<a name="KDE_WWW_.2F_KDE_Sysadmin" id="KDE_WWW_.2F_KDE_Sysadmin"></a><h3> <span class="mw-headline"> KDE WWW / KDE Sysadmin </span></h3>
<p>The KDE WWW encompasses not only the KDE Forums, but also Userbase, 
Techbase, the Community Wiki, Documentation, many International Web 
Pages, Mail lists, News, the Planet, Git, and others, housed on multiple
 servers. More details <a href="http://kde.org/support/" class="external text" title="http://kde.org/support/" rel="nofollow">here</a>.
</p>
<a name="Project:_Single_login_through_Identity.KDE.org_Integration" id="Project:_Single_login_through_Identity.KDE.org_Integration"></a><h4> <span class="mw-headline"> Project: Single login through Identity.KDE.org Integration </span></h4>
<p><b>Brief explanation:</b>
Create a username mapper with some form of a UI on the identity and 
wiki/forum, etc. sides. The most generic way to do it would probably to 
have special ldap properties for each of the various properties that 
already has its own user db (wikis, dot, forum), then have an agent 
running on those servers which can access their dbs. Users would then go
 to identity, open a "username mapper" module, the agent would then 
check to see if the username was in use. If it is, the user then gets to
 select a username from a list of available generated names or map to a 
pre-existing username if the emails match.
</p><p><b>Expected results:</b>
</p><p>KDE users will be able to manage logins to all KDE web resources 
using Identity. Users would also be able update emails and other user 
details when they change as well.
</p><p><b>Knowledge Prerequisite</b>
</p><p>Knowledge of how KDE Identity works, plus the software it bridges
 with, coupled with how to write a daemon (probably in a scripted 
language) which has to accept possibly invalid user input.
</p><p><b>Mentor</b>
</p><p>Ben Cooksley &lt;<a href="mailto:bcooksley@KDE.org" class="external text" title="mailto:bcooksley@KDE.org" rel="nofollow">bcooksley@KDE.org</a>&gt;<br>
Another mentor who knows daemons
</p><p><b>Contact</b>
</p>
<ul><li> IRC channel: #kde-www on Freenode
</li><li> Mailinglist: kde-www See <a href="http://kde.org/mailinglists/" class="external free" title="http://kde.org/mailinglists/" rel="nofollow">http://kde.org/mailinglists/</a> for details
</li></ul>
<a name="KDE_on_Windows" id="KDE_on_Windows"></a><h3> <span class="mw-headline"> KDE on Windows </span></h3>
<p>The KDE on Windows subproject makes KDE applications available on Microsoft Windows, both desktop (XP, Vista, 7) and Windows CE
</p>
<a name="Project:_single_applications" id="Project:_single_applications"></a><h4> <span class="mw-headline"> Project: single applications </span></h4>
<p><b>Brief explanation:</b>
</p><p>When the KDE repository was on Subversion, applications and 
libraries were organized in modules: kdelibs, kdeworkspace, kdegraphics,
 kdeutils, etc. Think of a module as a "suite" of somehow-related 
applications, libraries, and everything that was needed to build them 
(build system checks, configuration, etc).
</p><p>In order to build an application belonging to a module (for 
instance, KSnapshot, which was in kdegraphics), it was necessary to 
checkout the source for the whole module and run CMake against the 
module. Building a single application initially impossible, although 
later it was made somewhat possible through certain tricks Alexander 
Neundorf implemented in the build system.
</p><p>Now that KDE is moving to git, most applications and libraries 
are easy to build standalone: they have clear dependencies and include 
all the checks, definitions, etc in each build system
</p><p>KDE on Windows uses its own package manager (<a href="http://techbase.kde.org/Getting_Started/Build/KDE4/Windows/emerge" class="external text" title="http://techbase.kde.org/Getting_Started/Build/KDE4/Windows/emerge" rel="nofollow">emerge</a>)
 to build and install KDE and the third-party dependencies KDE needs. At
 the moment, it builds and installs modules, not individual applications
 (save for some exceptions).
</p><p>Your tasks:
</p>
<ul><li> make all the changes required in emerge so that building individual applications is possible
</li><li> update all the recipes in portage accordingly: we want individual applications, not modules
</li><li> update the current installer to install individual applications instead of modules
</li></ul>
<p><b>Expected results:</b>
</p><p>KDE on Windows users and developers will be able to build and 
install standalone applications (the dependency chain will of course be 
kept!)
</p><p>This task is important to achieve best results in the next proposed task.
</p><p><b>Knowledge Prerequisite</b>
</p><p>This is actually a fairly easy task and even if you only have a 
general knowledge of computers and software development, you can 
probably learn what you need in a couple of weeks.
</p><p>Desirable knowledge includes svn, git, Python, Windows, build 
systems (CMake, qmake, etc), compilers (gcc/mingw and Visual C++) and 
cross-platform concepts (esp. Linux-Windows)
</p><p><b>Mentor</b>
</p><p>TBA. Patrick Spendrin? Pau Garcia i Quiles?
</p><p><b>Contact</b>
</p>
<ul><li> IRC channel: #kde-windows on Freenode
</li><li> Mailinglist: kde-windows See <a href="https://mail.kde.org/mailman/listinfo/kde-windows" class="external free" title="https://mail.kde.org/mailman/listinfo/kde-windows" rel="nofollow">https://mail.kde.org/mailman/listinfo/kde-windows</a> for details
</li><li> Website: <a href="http://windows.kde.org/" class="external free" title="http://windows.kde.org" rel="nofollow">http://windows.kde.org</a>
</li></ul>
<a name="Project:_new_KDE_on_Windows_installer" id="Project:_new_KDE_on_Windows_installer"></a><h4> <span class="mw-headline"> Project: new KDE on Windows installer </span></h4>
<p><b>Brief explanation:</b>
</p><p>Currently, KDE on Windows can be installed using two ways:
</p>
<ul><li> <a href="http://techbase.kde.org/Getting_Started/Build/KDE4/Windows/emerge" class="external text" title="http://techbase.kde.org/Getting_Started/Build/KDE4/Windows/emerge" rel="nofollow">emerge</a>
</li><li> <a href="http://www.winkde.org/pub/kde/ports/win32/installer/kdewin-installer-gui-latest.exe" class="external text" title="http://www.winkde.org/pub/kde/ports/win32/installer/kdewin-installer-gui-latest.exe" rel="nofollow">end-user installer</a>
</li></ul>
<p>The installer is Cygwin-like, whic is very different from the normal InstallShield, NSIS, MSI, etc installers.
</p><p>Your task: create a new installer, something which looks much 
more appealing and easier to use. The Apple Mac AppStore is a good 
example.
</p><p>This new installer will assume sensible defaults (we'll discuss when it's time), use the Oxygen style, etc
</p><p>You can probably re-use most of the download and package management intelligence from the <a href="https://projects.kde.org/projects/kdesupport/kdewin-installer" class="external text" title="https://projects.kde.org/projects/kdesupport/kdewin-installer" rel="nofollow">current installer</a>.
</p><p><b>Expected results:</b>
</p><p>A new,  installer. It should consist on a SINGLE executable, i. e. it needs to be statically compiled.
</p><p><b>Knowledge Prerequisite</b>
</p><p>Software development with a compiled language
</p><p>Desirable knowledge to understand why emerge and the current 
installer do what they do includes svn, git, Python, Windows, build 
systems (CMake, qmake, etc), compilers (gcc/mingw and Visual C++) and 
cross-platform concepts (esp. Linux-Windows). You can probably learn 
about this and how KDE on Windows works in a couple of weeks.
</p><p>As for the implementation itself, it does not really matter as 
long as you get the job done. The sensible option, and consistent with 
the rest of KDE, seems to be Qt (QtWebKit, QML, etc) but if you are a 
C#, F#, C++ CLI, etc ninja, we'll gladly accept you.
</p><p><b>Mentor</b>
</p><p>TBA. Patrick Spendrin? Pau Garcia i Quiles?
</p><p><b>Contact</b>
</p>
<ul><li> IRC channel: #kde-windows on Freenode
</li><li> Mailinglist: kde-windows See <a href="https://mail.kde.org/mailman/listinfo/kde-windows" class="external free" title="https://mail.kde.org/mailman/listinfo/kde-windows" rel="nofollow">https://mail.kde.org/mailman/listinfo/kde-windows</a> for details
</li></ul>
<a name="KDE_Accessibility" id="KDE_Accessibility"></a><h3> <span class="mw-headline"> KDE Accessibility </span></h3>
<p>The KDE Accessibility subproject aims to make KDE applications accessible to all users no matter the disability.
</p>
<a name="Project:_You_decide" id="Project:_You_decide"></a><h4> <span class="mw-headline"> Project: You decide </span></h4>
<p><b>Brief explanation:</b>
</p><p>I haven't got any particular projects in mind, but if you can think of something there is lots to do.  Use your imagination
</p><p>Your possible tasks:
</p>
<ul><li> Take an application, make it fully accessible (Actions, menus, text, ensure it follows kde color scheme, etc.)
</li><li> Update the website with current information.
</li><li> Test and debug crashes in qt-atspi bridge itself.
</li></ul>
<p><b>Expected results:</b>
</p><p>This task is important to help get KDE usable by anyone with disabilities.
</p><p><b>Knowledge Prerequisite</b>
</p><p>This is actually a fairly easy task and even if you only have a 
general knowledge of computers and software development, you can 
probably learn what you need in a couple of weeks.
</p><p>Desirable knowledge includes svn, git, dbus, QAccessible, etc.
</p><p><b>Mentor</b>
</p><p>Jeremy Whiting &lt;<a href="mailto:jpwhiting@kde.org" class="external text" title="mailto:jpwhiting@kde.org" rel="nofollow">jpwhiting@kde.org</a>&gt;
</p><p><b>Contact</b>
</p>
<ul><li> IRC channel: #kde-accessibility on Freenode
</li><li> Mailinglist: kde-accessibility See <a href="http://kde.org/mailinglists/" class="external free" title="http://kde.org/mailinglists/" rel="nofollow">http://kde.org/mailinglists/</a> for details
</li><li> Website: <a href="http://accessibility.kde.org/" class="external free" title="http://accessibility.kde.org" rel="nofollow">http://accessibility.kde.org</a>
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 201/1000000
Post-expand include size: 621/2097152 bytes
Template argument size: 150/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key communitywiki:pcache:idhash:2052-0!1!0!!en!2!edit=0 and timestamp 20110407121750 -->
<div class="printfooter">
Retrieved from "<a href="http://community.kde.org/GSoC/2011/Ideas">http://community.kde.org/GSoC/2011/Ideas</a>"</div>
																				<!-- end content -->
							                        
										<div class="visualClear"></div>
									</div>
								</div>
									</div>
									</div>
	<div id="left">
		<!-- Search Menu -->
		<div class="menu_box">
			<form action="/Special:Search" id="searchform"><div>
				<input autocomplete="off" id="searchInput" name="search" accesskey="f" type="text">
				<input name="fulltext" class="searchButton" value="Search" type="submit">
			</div></form>
		</div>
	<!-- End of Search Menu -->
		
		<!-- Main Menu -->
	<div class="menutitle"><div>
		<h2>Navigation</h2>
		</div></div>
			<div class="menu_box">
			<ul>
				<li id="n-mainpage-description"><a href="http://community.kde.org/Main_Page">Main Page</a></li>
				<li id="n-portal"><a href="http://community.kde.org/KDE_Community_Wiki:Community_Portal">Community portal</a></li>
				<li id="n-currentevents"><a href="http://community.kde.org/KDE_Community_Wiki:Current_events">Current events</a></li>
				<li id="n-recentchanges"><a href="http://community.kde.org/Special:RecentChanges">Recent changes</a></li>
				<li id="n-randompage"><a href="http://community.kde.org/Special:Random">Random page</a></li>
				<li id="n-help"><a href="http://community.kde.org/Help:Contents">Help</a></li>
			</ul>
		<!-- Main Menu -->
	<div class="menutitle"><div>
		<h2>SEARCH</h2>
		</div></div>
			<div class="menu_box">
			<ul>
			</ul>
		<!-- Main Menu -->
	<div class="menutitle"><div>
		<h2>TOOLBOX</h2>
		</div></div>
			<div class="menu_box">
			<ul>
			</ul>
		<!-- Main Menu -->
	<div class="menutitle"><div>
		<h2>LANGUAGES</h2>
		</div></div>
			<div class="menu_box">
			<ul>
			</ul>
			</div>	
	<!-- Toolbox Menu -->
	<div class="menutitle"><div>
		<h2>Toolbox</h2>
		</div></div>
		<div class="menu_box">
			<ul>
				<li id="t-whatlinkshere"><a href="http://community.kde.org/Special:WhatLinksHere/GSoC/2011/Ideas">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="http://community.kde.org/Special:RecentChangesLinked/GSoC/2011/Ideas">Related changes</a></li>
<li id="t-specialpages"><a href="http://community.kde.org/Special:SpecialPages">Special pages</a></li>
				<li id="t-print"><a href="http://community.kde.org/index.php?title=GSoC/2011/Ideas&amp;printable=yes">Printable version</a></li>				<li id="t-permalink"><a href="http://community.kde.org/index.php?title=GSoC/2011/Ideas&amp;oldid=11560">Permanent link</a></li>			</ul>
		</div>
		<!-- End of Tool Box Menu -->

	<div class="menutitle"><div><h2>Personal tools</h2></div></div>
		<div class="pBody">
		<div class="menu_box">
			<ul>
				<li id="pt-login"><a href="http://community.kde.org/index.php?title=Special:UserLogin&amp;returnto=GSoC/2011/Ideas">Log in / create account</a></li>
				<li id="pt-openidlogin"><a href="http://community.kde.org/index.php?title=Special:OpenIDLogin&amp;returnto=GSoC/2011/Ideas">Login with OpenID</a></li>
			</ul>
                                <div id="f-copyrightico"><a href="http://community.kde.org/KDE_Community_Wiki:Copyrights"><img src="KDE_files/gfdlcc.png" alt="Creative Commons License SA 3.0 as well as the GNU Free Documentation License 1.2"></a></div>

		</div>
		</div>
	</div>
		<!-- End of Personal Tools Menu -->

		<div class="pBody">
			<ul>
			</ul>
		</div>
	</div>
		</div>
		</div>
		<!-- Presume this is the end of the BODY -->
		
		</div>
		<div class="clear"></div>
		<div id="footer"><div id="footer_text">
<!--		Maintained by <a href="mailto:kde-www@kde.org">KDE webmasters</a><br />-->
        KDE<sup>®</sup> and <a href="http://community.kde.org/media/images/kde_gear_black.png">the K Desktop Environment<sup>®</sup> logo</a> are registered trademarks of <a href="http://ev.kde.org/" title="Homepage of the KDE non-profit Organization">KDE e.V.</a> |
        <a href="http://www.kde.org/contact/impressum.php">Legal</a>
		</div></div>


		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.132 secs. -->		

</div></body></html>